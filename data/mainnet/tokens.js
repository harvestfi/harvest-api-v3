const { CHAIN_IDS, GET_PRICE_TYPES, ESTIMATED_APY_TYPES, SUSHI_POOLS_IDS } = require('../constants')

const addresses = require('./addresses.json')

const profitSharingCut8Percent = '0.92'
const profitSharingCut10Percent = '0.90'
const profitSharingCut15Percent = '0.85'
const profitSharingCut30Percent = '0.7'

module.exports = {
  FARM: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/farm.svg'],
    tokenAddress: addresses.FARM,
    tokenNames: ['FARM'],
    platform: ['Harvest'],
    tags: ['Beginners'],
    decimals: '18',
    vaultAddress: null,
    newDetails: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.FARM] },
  },
  WETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/eth.svg'],
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    tokenNames: ['ETH'],
    platform: ['Morpho - MEV Capital'],
    tags: ['Beginners'],
    tokenAddress: addresses.WETH,
    decimals: '18',
    vaultAddress: addresses.V2.WETH.NewVault,
    strategyAddress: addresses.V2.WETH.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [addresses.V2.WETH.MorphoVault, profitSharingCut15Percent, CHAIN_IDS.ETH_MAINNET],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'WETH'],
  },
  morpho_FLX_HYPE: {
    chain: CHAIN_IDS.HYPEREVM,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/hype.svg'],
    tokenNames: ['HYPE'],
    platform: ['Morpho - Felix'],
    tags: ['Beginner'],
    tokenAddress: addresses.HYPEREVM.V2.morpho_FLX_HYPE.Underlying,
    decimals: '18',
    vaultAddress: addresses.HYPEREVM.V2.morpho_FLX_HYPE.NewVault,
    strategyAddress: addresses.HYPEREVM.V2.morpho_FLX_HYPE.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['hyperliquid'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.HYPEREVM.V2.morpho_FLX_HYPE.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.HYPEREVM,
        ],
      },
    ],
  },
  morpho_FLX_USDC: {
    chain: CHAIN_IDS.HYPEREVM,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Felix'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.HYPEREVM.V2.morpho_FLX_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.HYPEREVM.V2.morpho_FLX_USDC.NewVault,
    strategyAddress: addresses.HYPEREVM.V2.morpho_FLX_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.HYPEREVM.V2.morpho_FLX_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.HYPEREVM,
        ],
      },
    ],
  },
  morpho_GLT_UETH: {
    chain: CHAIN_IDS.HYPEREVM,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['UETH'],
    platform: ['Morpho - Gauntlet'],
    tags: ['Beginner'],
    tokenAddress: addresses.HYPEREVM.V2.morpho_GLT_UETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.HYPEREVM.V2.morpho_GLT_UETH.NewVault,
    strategyAddress: addresses.HYPEREVM.V2.morpho_GLT_UETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['unit-ethereum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.HYPEREVM.V2.morpho_GLT_UETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.HYPEREVM,
        ],
      },
    ],
  },
  morpho_GLT_USDC: {
    chain: CHAIN_IDS.HYPEREVM,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.HYPEREVM.V2.morpho_GLT_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.HYPEREVM.V2.morpho_GLT_USDC.NewVault,
    strategyAddress: addresses.HYPEREVM.V2.morpho_GLT_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.HYPEREVM.V2.morpho_GLT_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.HYPEREVM,
        ],
      },
    ],
  },
  morpho_HYP_HYPE: {
    chain: CHAIN_IDS.HYPEREVM,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/hype.svg'],
    tokenNames: ['HYPE'],
    platform: ['Morpho - Hyperithm'],
    tags: ['Beginner'],
    tokenAddress: addresses.HYPEREVM.V2.morpho_HYP_HYPE.Underlying,
    decimals: '18',
    vaultAddress: addresses.HYPEREVM.V2.morpho_HYP_HYPE.NewVault,
    strategyAddress: addresses.HYPEREVM.V2.morpho_HYP_HYPE.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['hyperliquid'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.HYPEREVM.V2.morpho_HYP_HYPE.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.HYPEREVM,
        ],
      },
    ],
  },
  morpho_MEV_HYPE: {
    chain: CHAIN_IDS.HYPEREVM,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/hype.svg'],
    tokenNames: ['HYPE'],
    platform: ['Morpho - MEV Capital'],
    tags: ['Beginner'],
    tokenAddress: addresses.HYPEREVM.V2.morpho_MEV_HYPE.Underlying,
    decimals: '18',
    vaultAddress: addresses.HYPEREVM.V2.morpho_MEV_HYPE.NewVault,
    strategyAddress: addresses.HYPEREVM.V2.morpho_MEV_HYPE.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['hyperliquid'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.HYPEREVM.V2.morpho_MEV_HYPE.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.HYPEREVM,
        ],
      },
    ],
  },
  euler_YO_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/cbbtc.svg'],
    apyTokenSymbols: ['cbBTC'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Euler - Frontier YO'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.euler_YO_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.euler_YO_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.euler_YO_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_YO_cbBTC.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_YO_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Euler - Frontier YO'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.euler_YO_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.euler_YO_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.euler_YO_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_YO_ETH.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_EUL_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Euler - Euler Base'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.euler_EUL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.euler_EUL_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.euler_EUL_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_EUL_ETH.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_EUL_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - Euler Base'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.euler_EUL_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.euler_EUL_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.euler_EUL_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_EUL_USDC.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_YO_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - Frontier YO'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.euler_YO_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.euler_YO_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.euler_YO_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_YO_USDC.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_AS_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Euler - Alterscope LRT'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.euler_AS_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.euler_AS_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.euler_AS_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_AS_ETH.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_AG_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - AlphaGrowth'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.euler_AG_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.euler_AG_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.euler_AG_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_AG_USDC.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  silo_ET_ETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Silo - Ethereal'],
    tags: ['Beginner'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.silo_ET_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.silo_ET_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.silo_ET_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SILO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.silo_ET_ETH.SiloVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  euler_TF_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/reul.svg'],
    apyTokenSymbols: ['ARB', 'rEUL'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - Theo Frontier'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.euler_TF_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.euler_TF_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.euler_TF_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.euler_TF_USDC.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
          addresses.ARBITRUM_ONE.V2.euler_TF_USDC.NewStrategy,
        ],
      },
    ],
  },
  morpho_CR_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Clearstar Reactor'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_CR_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_CR_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_CR_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_CR_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_HY_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Hyperithm'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_HY_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_HY_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_HY_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_HY_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_YD_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Yearn Degen'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_YD_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_YD_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_YD_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_YD_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  silo_VM_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Silo - Varlamore'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.silo_VM_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.silo_VM_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.silo_VM_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SILO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.silo_VM_USDC.SiloVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_OEV_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - OEV-boosted'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_OEV_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_OEV_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_OEV_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_OEV_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_PT_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - MEV PTs'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_PT_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_PT_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_PT_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_PT_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_SP_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Spectra'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_SP_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_SP_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_SP_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_SP_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  IPOR_MORPHO_USDC_base: {
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_MORPHO_USDC_base',
    isIPORVault: true,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Autopilot - MORPHO'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.IPOR_MORPHO_USDC_base.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.IPOR_MORPHO_USDC_base.NewVault,
    vaultDecimals: '8',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_MORPHO_USDC_base.Underlying,
          addresses.BASE.V2.IPOR_MORPHO_USDC_base.NewVault,
          CHAIN_IDS.BASE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  euler_EE_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/reul.svg'],
    apyTokenSymbols: ['ARB', 'rEUL'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler Earn'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.euler_EE_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.euler_EE_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.euler_EE_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_EARN,
        params: [
          addresses.ARBITRUM_ONE.V2.euler_EE_USDC.EulerVault,
          addresses.ARBITRUM_ONE.V2.euler_EE_USDC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  silo_OP_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Silo - Optima'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.silo_OP_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.silo_OP_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.silo_OP_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SILO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.silo_OP_USDC.SiloVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_AC_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Avantgarde Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_AC_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_AC_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_AC_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_AC_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_GC_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_GC_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_GC_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_GC_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_GC_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_GP_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Prime'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_GP_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_GP_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_GP_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_GP_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_MEV_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - MEV Capital'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_MEV_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_MEV_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_MEV_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_MEV_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_RE7_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - RE7'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_RE7_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_RE7_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_RE7_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_RE7_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_SHHY_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Steakhouse High Yield'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_SHHY_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_SHHY_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_SHHY_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_SHHY_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_SHP_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Steakhouse Prime'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_SHP_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_SHP_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_SHP_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_SHP_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_YOG_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ARB', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Yearn OG'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.morpho_YOG_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.morpho_YOG_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.morpho_YOG_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.ARBITRUM_ONE.V2.morpho_YOG_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morpho_CHY_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Clearstar High Yield'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_CHY_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_CHY_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_CHY_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_CHY_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_CR_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Clearstar Reactor'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morpho_CR_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morpho_CR_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_CR_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_CR_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_SHHY_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Steakhouse High Yield v1.1'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_SHHY_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_SHHY_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_SHHY_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_SHHY_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_SHP_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Steakhouse Prime'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_SHP_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_SHP_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_SHP_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_SHP_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_SmH_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Smokehouse'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_SmH_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_SmH_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_SmH_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_SmH_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_9S_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Turtle'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_9S_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_9S_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_9S_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_9S_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_AR_USDC_mainnet: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Apostro Resolv'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_AR_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_AR_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_AR_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_AR_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_CR_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Clearstar Reactor'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_CR_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_CR_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_CR_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_CR_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_FX_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - f(x) RE7'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_FX_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_FX_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_FX_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_FX_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_RL_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Relend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_RL_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_RL_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_RL_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_RL_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  silo_PENDLE_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Silo - PENDLE'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.silo_PENDLE_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.silo_PENDLE_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.silo_PENDLE_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SILO,
        params: [addresses.ARBITRUM_ONE.V2.silo_PENDLE_USDC.Silo, profitSharingCut10Percent],
      },
    ],
  },
  silo_sUSDX_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Silo - sUSDX'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.silo_sUSDX_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.silo_sUSDX_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.silo_sUSDX_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SILO,
        params: [addresses.ARBITRUM_ONE.V2.silo_sUSDX_USDC.Silo, profitSharingCut10Percent],
      },
    ],
  },
  silo_yUSD_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Silo - yUSD'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.silo_yUSD_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.silo_yUSD_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.silo_yUSD_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SILO,
        params: [addresses.ARBITRUM_ONE.V2.silo_yUSD_USDC.Silo, profitSharingCut10Percent],
      },
    ],
  },
  moonwell_cbXRP: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/cbxrp.svg'],
    tokenNames: ['cbXRP'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_cbXRP.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.moonwell_cbXRP.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_cbXRP.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-xrp'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_cbXRP.Underlying,
          addresses.BASE.V2.moonwell_cbXRP.mToken,
          addresses.BASE.V2.moonwell_cbXRP.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  morpho_COE_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Clearstar Reactor OpenEden'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_COE_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_COE_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_COE_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_COE_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_EF_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Extrafi XLend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_EF_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_EF_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_EF_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_EF_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_GF_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Frontier'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_GF_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_GF_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_GF_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_GF_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_EF_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Extrafi XLend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morpho_EF_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morpho_EF_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_EF_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_EF_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_YOG_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Yearn OG'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morpho_YOG_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morpho_YOG_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_YOG_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_YOG_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  IPOR_USDC_ethereum: {
    chain: CHAIN_IDS.ETH_MAINNET,
    id: 'IPOR_USDC_ethereum',
    isIPORVault: true,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Autopilot'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.V2.IPOR_USDC_ethereum.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.IPOR_USDC_ethereum.NewVault,
    vaultDecimals: '8',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.V2.IPOR_USDC_ethereum.Underlying,
          addresses.V2.IPOR_USDC_ethereum.NewVault,
          CHAIN_IDS.ETH_MAINNET,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  morpho_AR_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Apostro Resolv'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_AR_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_AR_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_AR_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_AR_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_UN_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Universal'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_UN_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_UN_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_UN_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_UN_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morpho_YOG_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Yearn OG'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morpho_YOG_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morpho_YOG_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morpho_YOG_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morpho_YOG_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  aave_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Aave'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.aave_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.aave_USDC.NewVault,
    strategyAddress: addresses.V2.aave_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.aave_USDC.Underlying,
          addresses.V2.aave_USDC.AavePool,
          addresses.V2.aave_USDC.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  aave_USDC_prime: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Aave - Prime'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.aave_USDC_prime.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.aave_USDC_prime.NewVault,
    strategyAddress: addresses.V2.aave_USDC_prime.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.aave_USDC_prime.Underlying,
          addresses.V2.aave_USDC_prime.AavePool,
          addresses.V2.aave_USDC_prime.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  compound_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Compound V3'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.compound_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.compound_USDC.NewVault,
    strategyAddress: addresses.V2.compound_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.V2.compound_USDC.Underlying,
          addresses.V2.compound_USDC.Market,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  euler_OE_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - OpenEden'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.euler_OE_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.euler_OE_USDC.NewVault,
    strategyAddress: addresses.V2.euler_OE_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.V2.euler_OE_USDC.EulerVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  euler_RE_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - Resolv'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.euler_RE_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.euler_RE_USDC.NewVault,
    strategyAddress: addresses.V2.euler_RE_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.V2.euler_RE_USDC.EulerVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  euler_SM_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - Stablecoin Maxi'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.euler_SM_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.euler_SM_USDC.NewVault,
    strategyAddress: addresses.V2.euler_SM_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.V2.euler_SM_USDC.EulerVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_FA_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Alpha Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_FA_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_FA_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_FA_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_FA_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_HY_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Hyperithm'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_HY_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_HY_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_HY_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_HY_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_MEV_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - MEV Capital'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_MEV_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_MEV_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_MEV_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_MEV_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_SH_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Smokehouse'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_SH_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_SH_USDC.NewVault,
    strategyAddress: addresses.V2.morpho_SH_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_SH_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  fortyAcres_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['40 Acres'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.fortyAcres_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.fortyAcres_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.fortyAcres_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FORTY_ACRES,
        params: [
          addresses.BASE.V2.fortyAcres_USDC.FAVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  ALCX: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/alcx.svg'],
    tokenAddress: addresses.ALCX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['alchemix'] },
  },
  reUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/reusd.svg'],
    tokenAddress: addresses.reUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['resupply-usd'] },
  },
  scrvUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/scrvusd.svg'],
    tokenAddress: addresses.scrvUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['savings-crvusd'] },
  },
  sfrxUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/sfrxusd.png'],
    tokenAddress: addresses.sfrxUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['staked-frax-usd'] },
  },
  sUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/susd.svg'],
    tokenAddress: addresses.sUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.sUSD] },
  },
  sUSDe_mainnet: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/susde.svg'],
    tokenAddress: addresses.sUSDe,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['ethena-staked-usde'] },
  },
  USDe: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usde.svg'],
    tokenAddress: addresses.USDe,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['ethena-usde'] },
  },
  CJPY: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/cjpy.svg'],
    tokenAddress: addresses.CJPY,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['convertible-jpy-token'] },
  },
  RSUP: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/rsup.svg'],
    tokenAddress: addresses.RSUP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['resupply'] },
  },
  T: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/t.svg'],
    tokenAddress: addresses.T,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['threshold-network-token'] },
  },
  curve_ALCX_FRAXBP: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/alcx.svg', './icons/fraxbp.svg'],
    tokenNames: ['ALCX', 'FRAXBP'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.curve_ALCX_FRAXBP.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_ALCX_FRAXBP.NewVault,
    strategyAddress: addresses.V2.curve_ALCX_FRAXBP.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_ALCX_FRAXBP.PoolAddress,
        addresses.V2.curve_ALCX_FRAXBP.Underlying,
        '18',
        ['ALCX', 'FRAXBP'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['alcx_fraxbp', profitSharingCut15Percent],
      },
    ],
  },
  curve_reUSD_scrvUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/reusd.svg', './icons/scrvusd.svg'],
    tokenNames: ['reUSD', 'scrvUSD'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.curve_reUSD_scrvUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_reUSD_scrvUSD.NewVault,
    strategyAddress: addresses.V2.curve_reUSD_scrvUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_reUSD_scrvUSD.Underlying,
        addresses.V2.curve_reUSD_scrvUSD.Underlying,
        '18',
        ['reUSD', 'scrvUSD'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['reusd_scrvusd', profitSharingCut15Percent],
      },
    ],
  },
  curve_reUSD_sfrxUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/reusd.svg', './icons/sfrxusd.png'],
    tokenNames: ['reUSD', 'sfrxUSD'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.curve_reUSD_sfrxUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_reUSD_sfrxUSD.NewVault,
    strategyAddress: addresses.V2.curve_reUSD_sfrxUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_reUSD_sfrxUSD.Underlying,
        addresses.V2.curve_reUSD_sfrxUSD.Underlying,
        '18',
        ['reUSD', 'sfrxUSD'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['reusd_sfrxusd', profitSharingCut15Percent],
      },
    ],
  },
  curve_sUSD_sUSDe: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/susd.svg', './icons/susde.svg'],
    tokenNames: ['sUSD', 'sUSDe'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.curve_sUSD_sUSDe.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_sUSD_sUSDe.NewVault,
    strategyAddress: addresses.V2.curve_sUSD_sUSDe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_sUSD_sUSDe.Underlying,
        addresses.V2.curve_sUSD_sUSDe.Underlying,
        '18',
        ['sUSD', 'sUSDe_mainnet'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['susd_susde', profitSharingCut15Percent],
      },
    ],
  },
  curve_sUSD_USDe: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/susd.svg', './icons/usde.svg'],
    tokenNames: ['sUSD', 'USDe'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.curve_sUSD_USDe.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_sUSD_USDe.NewVault,
    strategyAddress: addresses.V2.curve_sUSD_USDe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_sUSD_USDe.Underlying,
        addresses.V2.curve_sUSD_USDe.Underlying,
        '18',
        ['sUSD', 'USDe'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['susd_usde', profitSharingCut15Percent],
      },
    ],
  },
  curve_CJPY_ETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/cjpy.svg', './icons/weth.svg'],
    tokenNames: ['CJPY', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.curve_CJPY_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_CJPY_ETH.NewVault,
    strategyAddress: addresses.V2.curve_CJPY_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_CJPY_ETH.Underlying,
        addresses.V2.curve_CJPY_ETH.Underlying,
        '18',
        ['CJPY', 'WETH'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['cjpy_eth', profitSharingCut15Percent],
      },
    ],
  },
  curve_RSUP_ETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/rsup.svg', './icons/weth.svg'],
    tokenNames: ['RSUP', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.curve_RSUP_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_RSUP_ETH.NewVault,
    strategyAddress: addresses.V2.curve_RSUP_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_RSUP_ETH.Underlying,
        addresses.V2.curve_RSUP_ETH.Underlying,
        '18',
        ['RSUP', 'WETH'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['rsup_eth', profitSharingCut15Percent],
      },
    ],
  },
  curve_T_ETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/t.svg', './icons/eth.svg'],
    tokenNames: ['T', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.curve_T_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_T_ETH.NewVault,
    strategyAddress: addresses.V2.curve_T_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_T_ETH.PoolAddress,
        addresses.V2.curve_T_ETH.Underlying,
        '18',
        ['ETH', 'T'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['t_eth', profitSharingCut15Percent],
      },
    ],
  },
  arcadia_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Arcadia - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.arcadia_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.arcadia_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.arcadia_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ARCADIA_LEND,
        params: [addresses.BASE.V2.arcadia_ETH.LendingPool, profitSharingCut10Percent],
      },
    ],
  },
  arcadia_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Arcadia - Lend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.arcadia_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.arcadia_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.arcadia_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ARCADIA_LEND,
        params: [addresses.BASE.V2.arcadia_USDC.LendingPool, profitSharingCut10Percent],
      },
    ],
  },
  arcadia_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/cbbtc.svg'],
    apyTokenSymbols: ['cbBTC'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Arcadia - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.arcadia_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.arcadia_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.arcadia_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ARCADIA_LEND,
        params: [addresses.BASE.V2.arcadia_cbBTC.LendingPool, profitSharingCut10Percent],
      },
    ],
  },
  euler_USDC_AR: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Euler - Apostro Resolv'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.euler_USDC_AR.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.euler_USDC_AR.NewVault,
    strategyAddress: addresses.BASE.V2.euler_USDC_AR.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_USDC_AR.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_EURC_EUL: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eurc.svg'],
    apyTokenSymbols: ['EURC'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Euler - Euler Base'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.euler_EURC_EUL.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.euler_EURC_EUL.NewVault,
    strategyAddress: addresses.BASE.V2.euler_EURC_EUL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_EURC_EUL.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  euler_USR_AR: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usr.svg'],
    apyTokenSymbols: ['USR'],
    logoUrl: ['./icons/usr.svg'],
    tokenNames: ['USR'],
    platform: ['Euler - Apostro Resolv'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.euler_USR_AR.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.euler_USR_AR.NewVault,
    strategyAddress: addresses.BASE.V2.euler_USR_AR.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['resolv-usr'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EULER_VAULT,
        params: [
          addresses.BASE.V2.euler_USR_AR.EulerVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  moonwell_MORPHO: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/morpho.svg'],
    tokenNames: ['MORPHO'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_MORPHO.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_MORPHO.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_MORPHO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['morpho'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_MORPHO.Underlying,
          addresses.BASE.V2.moonwell_MORPHO.mToken,
          addresses.BASE.V2.moonwell_MORPHO.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aave_EURC_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.aave_EURC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.aave_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.aave_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.BASE.V2.aave_EURC.Underlying,
          addresses.BASE.V2.aave_EURC.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoCompound_ETH: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    apyIconUrls: ['./icons/comp.svg', './icons/pol.svg'],
    apyTokenSymbols: ['COMP', 'POL'],
    platform: ['Morpho - Compound'],
    tags: ['Beginner'],
    tokenAddress: addresses.MATIC.V2.morphoCompound_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.morphoCompound_ETH.NewVault,
    strategyAddress: addresses.MATIC.V2.morphoCompound_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.morphoCompound_ETH.NewStrategy,
          addresses.MATIC.V2.morphoCompound_ETH.MorphoVault,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  morphoCompound_USDC: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    apyIconUrls: ['./icons/comp.svg', './icons/pol.svg'],
    apyTokenSymbols: ['COMP', 'POL'],
    platform: ['Morpho - Compound'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.MATIC.V2.morphoCompound_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.morphoCompound_USDC.NewVault,
    strategyAddress: addresses.MATIC.V2.morphoCompound_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.morphoCompound_USDC.NewStrategy,
          addresses.MATIC.V2.morphoCompound_USDC.MorphoVault,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  morphoCompound_USDT: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    apyIconUrls: ['./icons/comp.svg', './icons/pol.svg'],
    apyTokenSymbols: ['COMP', 'POL'],
    platform: ['Morpho - Compound'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.MATIC.V2.morphoCompound_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.morphoCompound_USDT.NewVault,
    strategyAddress: addresses.MATIC.V2.morphoCompound_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.morphoCompound_USDT.NewStrategy,
          addresses.MATIC.V2.morphoCompound_USDT.MorphoVault,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  IPOR_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    id: 'IPOR_USDC_arbitrum',
    isIPORVault: true,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Autopilot'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum.NewVault,
    vaultDecimals: '8',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum.NewVault,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  IPOR_WETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    id: 'IPOR_WETH_arbitrum',
    isIPORVault: true,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['WETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['WETH'],
    platform: ['Autopilot'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.IPOR_WETH_arbitrum.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.IPOR_WETH_arbitrum.NewVault,
    vaultDecimals: '20',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.ARBITRUM_ONE.V2.IPOR_WETH_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.V2.IPOR_WETH_arbitrum.NewVault,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  IPOR_WBTC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    id: 'IPOR_WBTC_arbitrum',
    isIPORVault: true,
    apyIconUrls: ['./icons/wbtc.svg'],
    apyTokenSymbols: ['WBTC'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['Autopilot'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.IPOR_WBTC_arbitrum.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.IPOR_WBTC_arbitrum.NewVault,
    vaultDecimals: '10',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.ARBITRUM_ONE.V2.IPOR_WBTC_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.V2.IPOR_WBTC_arbitrum.NewVault,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  IPOR_USDC_base: {
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_USDC_base',
    isIPORVault: true,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Autopilot'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.IPOR_USDC_base.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.IPOR_USDC_base.NewVault,
    vaultDecimals: '8',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_USDC_base.Underlying,
          addresses.BASE.V2.IPOR_USDC_base.NewVault,
          CHAIN_IDS.BASE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  IPOR_WETH_base: {
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_WETH_base',
    isIPORVault: true,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['WETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['WETH'],
    platform: ['Autopilot'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.IPOR_WETH_base.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.IPOR_WETH_base.NewVault,
    vaultDecimals: '20',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_WETH_base.Underlying,
          addresses.BASE.V2.IPOR_WETH_base.NewVault,
          CHAIN_IDS.BASE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  IPOR_cbBTC_base: {
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_cbBTC_base',
    isIPORVault: true,
    apyIconUrls: ['./icons/cbbtc.svg'],
    apyTokenSymbols: ['cbBTC'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Autopilot'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.IPOR_cbBTC_base.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.IPOR_cbBTC_base.NewVault,
    vaultDecimals: '10',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_cbBTC_base.Underlying,
          addresses.BASE.V2.IPOR_cbBTC_base.NewVault,
          CHAIN_IDS.BASE,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  morphoGC_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoGC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morphoGC_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morphoGC_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoGC_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoION_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/ion.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ION', 'MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Ionic'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoION_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morphoION_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morphoION_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoION_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoRE7_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Re7'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoRE7_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morphoRE7_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morphoRE7_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoRE7_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoSH_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Steakhouse'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoSH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morphoSH_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSH_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoSE_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['SEAM', 'MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Seamless'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoSE_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morphoSE_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSE_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSE_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoGC_EURC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoGC_EURC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoGC_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoGC_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoGC_EURC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoSH_EURC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Morpho - Steakhouse'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoSH_EURC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoSH_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSH_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSH_EURC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoGC_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoGC_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoGC_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoGC_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoGC_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoGP_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Prime'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoGP_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoGP_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoGP_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoGP_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoION_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/ion.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ION', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Ionic'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoION_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoION_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoION_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoION_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoRE7_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Re7'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoRE7_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoRE7_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoRE7_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoRE7_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoSH_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Steakhouse'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoSH_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoSH_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSH_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSH_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoSPK_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Spark'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoSPK_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoSPK_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSPK_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSPK_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  extrafi_USDC_2: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.extrafi_USDC_2.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.extrafi_USDC_2.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_USDC_2.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_USDC_2.RewardPool,
          addresses.BASE.V2.extrafi_USDC_2.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_ETH_2: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['ExtraFi - Lend Pool #2'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_ETH_2.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_ETH_2.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_ETH_2.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_ETH_2.RewardPool,
          addresses.BASE.V2.extrafi_ETH_2.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  venus_ETH_core: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Venus - Core'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.venus_ETH_core.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.venus_ETH_core.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.venus_ETH_core.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.venus_ETH_core.Underlying,
          addresses.ARBITRUM_ONE.V2.venus_ETH_core.cToken,
          addresses.ARBITRUM_ONE.V2.venus_ETH_core.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  venus_ETH_lsd: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Venus - Liquid Staked ETH'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.venus_ETH_lsd.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.venus_ETH_lsd.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.venus_ETH_lsd.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.venus_ETH_lsd.Underlying,
          addresses.ARBITRUM_ONE.V2.venus_ETH_lsd.cToken,
          addresses.ARBITRUM_ONE.V2.venus_ETH_lsd.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  venus_USDC_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Venus'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.venus_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.venus_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.venus_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.venus_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.venus_USDC.cToken,
          addresses.ARBITRUM_ONE.V2.venus_USDC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  venus_USDT_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Venus'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.venus_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.venus_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.venus_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.venus_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.venus_USDT.cToken,
          addresses.ARBITRUM_ONE.V2.venus_USDT.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  venus_WBTC_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['Venus'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.venus_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.venus_WBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.venus_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.venus_WBTC.Underlying,
          addresses.ARBITRUM_ONE.V2.venus_WBTC.cToken,
          addresses.ARBITRUM_ONE.V2.venus_WBTC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  morphoSE_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['SEAM', 'MORPHO'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Morpho - Seamless'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoSE_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.morphoSE_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSE_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSE_cbBTC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoGC_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoGC_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.morphoGC_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoGC_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoGC_cbBTC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  moonwell_LBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/lbtc.svg'],
    tokenNames: ['LBTC'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_LBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.moonwell_LBTC.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_LBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lombard-staked-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_LBTC.Underlying,
          addresses.BASE.V2.moonwell_LBTC.mToken,
          addresses.BASE.V2.moonwell_LBTC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_tBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg', './icons/t.svg'],
    apyTokenSymbols: ['WELL', 'T'],
    logoUrl: ['./icons/tbtc.svg'],
    tokenNames: ['tBTC'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_tBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_tBTC.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_tBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tbtc'],
    },
    apyDescriptionOverride: ['Auto harvested', 'Claimable through Merkl'],
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_tBTC.Underlying,
          addresses.BASE.V2.moonwell_tBTC.mToken,
          addresses.BASE.V2.moonwell_tBTC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.BASE.V2.moonwell_tBTC.NewStrategy,
          addresses.BASE.V2.moonwell_tBTC.mToken,
          CHAIN_IDS.BASE,
          '1',
          true,
        ],
        extraDailyCompound: false,
      },
    ],
  },
  moonwell_USDS: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/usds.svg'],
    tokenNames: ['USDS'],
    platform: ['Moonwell'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.moonwell_USDS.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_USDS.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_USDS.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usds'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_USDS.Underlying,
          addresses.BASE.V2.moonwell_USDS.mToken,
          addresses.BASE.V2.moonwell_USDS.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_VIRTUAL: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/virtual.svg'],
    tokenNames: ['VIRTUAL'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_VIRTUAL.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_VIRTUAL.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_VIRTUAL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['virtual-protocol'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_VIRTUAL.Underlying,
          addresses.BASE.V2.moonwell_VIRTUAL.mToken,
          addresses.BASE.V2.moonwell_VIRTUAL.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_WELL: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/well.svg'],
    tokenNames: ['WELL'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_WELL.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_WELL.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_WELL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['moonwell-artemis'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_WELL.Underlying,
          addresses.BASE.V2.moonwell_WELL.mToken,
          addresses.BASE.V2.moonwell_WELL.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aixCB: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/aixcb.svg'],
    tokenAddress: addresses.BASE.aixCB,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aixcb-by-virtuals'],
    },
  },
  CHAMP: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/champ.svg'],
    tokenAddress: addresses.BASE.CHAMP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['super-champs'],
    },
  },
  VVV: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/vvv.svg'],
    tokenAddress: addresses.BASE.VVV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['venice-token'],
    },
  },
  wBLT: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/wblt.svg'],
    tokenAddress: addresses.BASE.wBLT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bmx-liquidity-token'],
    },
  },
  BMX: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/bmx.svg'],
    tokenAddress: addresses.BASE.BMX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['bmx'],
    },
  },
  aerodrome_aixCB_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/aixcb.svg', './icons/eth.svg'],
    tokenNames: ['aixCB', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_aixCB_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_aixCB_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_aixCB_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_aixCB_ETH.Underlying, 'aixCB', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_aixCB_ETH.Underlying,
          addresses.BASE.V2.aerodrome_aixCB_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_CHAMP_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/champ.svg', './icons/cbbtc.svg'],
    tokenNames: ['CHAMP', 'cbBTC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_CHAMP_cbBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_CHAMP_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_CHAMP_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_CHAMP_cbBTC.Underlying, 'CHAMP', 'moonwell_cbBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_CHAMP_cbBTC.Underlying,
          addresses.BASE.V2.aerodrome_CHAMP_cbBTC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_CHAMP_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/champ.svg', './icons/eth.svg'],
    tokenNames: ['CHAMP', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_CHAMP_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_CHAMP_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_CHAMP_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_CHAMP_ETH.Underlying, 'CHAMP', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_CHAMP_ETH.Underlying,
          addresses.BASE.V2.aerodrome_CHAMP_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_ETH_USDC_V2: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    tokenNames: ['ETH', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_ETH_USDC_V2.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_ETH_USDC_V2.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_ETH_USDC_V2.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_ETH_USDC_V2.Underlying, 'USDC_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_ETH_USDC_V2.Underlying,
          addresses.BASE.V2.aerodrome_ETH_USDC_V2.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_VIRTUAL_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/virtual.svg', './icons/eth.svg'],
    tokenNames: ['VIRTUAL', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_VIRTUAL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_VIRTUAL_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_VIRTUAL_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_VIRTUAL_ETH.Underlying, 'VIRTUAL_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_VIRTUAL_ETH.Underlying,
          addresses.BASE.V2.aerodrome_VIRTUAL_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_VVV_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/vvv.svg', './icons/eth.svg'],
    tokenNames: ['VVV', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_VVV_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_VVV_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_VVV_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_VVV_ETH.Underlying, 'VVV', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_VVV_ETH.Underlying,
          addresses.BASE.V2.aerodrome_VVV_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_wBLT_BMX: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/wblt.svg', './icons/bmx.svg'],
    tokenNames: ['wBLT', 'BMX'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_wBLT_BMX.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_wBLT_BMX.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_wBLT_BMX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_wBLT_BMX.Underlying, 'wBLT', 'BMX'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_wBLT_BMX.Underlying,
          addresses.BASE.V2.aerodrome_wBLT_BMX.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_AERO_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/aero.svg', './icons/eth.svg'],
    tokenNames: ['AERO', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_AERO_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_AERO_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_AERO_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_AERO_ETH.Underlying, 'AERO', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_AERO_ETH.Underlying,
          addresses.BASE.V2.aerodrome_AERO_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aave_USDT_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.aave_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.aave_USDT.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.aave_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.aave_USDT.Underlying,
          addresses.ZKSYNC.V2.aave_USDT.AavePool,
          addresses.ZKSYNC.V2.aave_USDT.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  aave_ZK_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/zk.svg'],
    tokenNames: ['ZK'],
    platform: ['Aave'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.aave_ZK.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.aave_ZK.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.aave_ZK.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.aave_ZK.Underlying,
          addresses.ZKSYNC.V2.aave_ZK.AavePool,
          addresses.ZKSYNC.V2.aave_ZK.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  venus_USDC: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg', './icons/xvs.svg'],
    apyTokenSymbols: ['ZK', 'XVS'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Venus'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.venus_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.venus_USDC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_USDC.Underlying,
          addresses.ZKSYNC.V2.venus_USDC.cToken,
          addresses.ZKSYNC.V2.venus_USDC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  USDM_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdm.svg'],
    tokenAddress: addresses.ZKSYNC.USDM,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mountain-protocol-usdm'],
    },
  },
  venus_WUSDM: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg', './icons/xvs.svg'],
    apyTokenSymbols: ['ZK', 'XVS'],
    logoUrl: ['./icons/usdm.svg'],
    tokenNames: ['wUSDM'],
    platform: ['Venus'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.venus_WUSDM.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.venus_WUSDM.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_WUSDM.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ZKSYNC.V2.venus_WUSDM.Underlying, addresses.ZKSYNC.USDM, CHAIN_IDS.ZKSYNC],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_WUSDM.Underlying,
          addresses.ZKSYNC.V2.venus_WUSDM.cToken,
          addresses.ZKSYNC.V2.venus_WUSDM.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  reactor_USDC: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['ReactorFusion'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.reactor_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.reactor_USDC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.reactor_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.REACTORFUSION_FOLD,
        params: [
          addresses.ZKSYNC.V2.reactor_USDC.Underlying,
          addresses.ZKSYNC.V2.reactor_USDC.cToken,
          addresses.ZKSYNC.V2.reactor_USDC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zerolend_DAI_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['ZeroLend'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_DAI.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_DAI.Underlying,
          addresses.ZKSYNC.V2.zerolend_DAI.AavePool,
          addresses.ZKSYNC.V2.zerolend_DAI.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_LUSD_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/lusd.svg'],
    tokenNames: ['LUSD'],
    platform: ['ZeroLend'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_LUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_LUSD.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_LUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['liquity-usd'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_LUSD.Underlying,
          addresses.ZKSYNC.V2.zerolend_LUSD.AavePool,
          addresses.ZKSYNC.V2.zerolend_LUSD.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_MBTC_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/mbtc.svg'],
    tokenNames: ['MBTC'],
    platform: ['ZeroLend'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_MBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_MBTC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_MBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['merlin-s-seal-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_MBTC.Underlying,
          addresses.ZKSYNC.V2.zerolend_MBTC.AavePool,
          addresses.ZKSYNC.V2.zerolend_MBTC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_WBTC_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['ZeroLend'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_WBTC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_WBTC.Underlying,
          addresses.ZKSYNC.V2.zerolend_WBTC.AavePool,
          addresses.ZKSYNC.V2.zerolend_WBTC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_ZK_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/zk.svg'],
    tokenNames: ['ZK'],
    platform: ['ZeroLend'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_ZK.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_ZK.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_ZK.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_ZK.Underlying,
          addresses.ZKSYNC.V2.zerolend_ZK.AavePool,
          addresses.ZKSYNC.V2.zerolend_ZK.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  IPOR_USDC_base_old: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_USDC_base_old',
    isIPORVault: true,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Autopilot'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.IPOR_USDC_base_old.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.IPOR_USDC_base_old.NewVault,
    vaultDecimals: '8',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_USDC_base_old.Underlying,
          addresses.BASE.V2.IPOR_USDC_base_old.NewVault,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  IPOR_WETH_base_old: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_WETH_base_old',
    isIPORVault: true,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['WETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['WETH'],
    platform: ['Autopilot'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.IPOR_WETH_base_old.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.IPOR_WETH_base_old.NewVault,
    vaultDecimals: '20',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_WETH_base_old.Underlying,
          addresses.BASE.V2.IPOR_WETH_base_old.NewVault,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  IPOR_cbBTC_base_old: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    id: 'IPOR_cbBTC_base_old',
    isIPORVault: true,
    apyIconUrls: ['./icons/cbbtc.svg'],
    apyTokenSymbols: ['cbBTC'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Autopilot'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.IPOR_cbBTC_base_old.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.IPOR_cbBTC_base_old.NewVault,
    vaultDecimals: '10',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.BASE.V2.IPOR_cbBTC_base_old.Underlying,
          addresses.BASE.V2.IPOR_cbBTC_base_old.NewVault,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  USDL: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usdl.svg'],
    tokenAddress: addresses.USDL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lift-dollar'],
    },
  },
  morphoCS_USDL: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg', './icons/shift.svg'],
    apyTokenSymbols: ['MORPHO', 'SHIFT'],
    apyDescriptionOverride: ['Auto harvested', 'Coinshift allocation'],
    logoUrl: ['./icons/usdl.svg'],
    tokenNames: ['USDL'],
    platform: ['Morpho - Coinshift'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morphoCS_USDL.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.morphoCS_USDL.NewVault,
    strategyAddress: addresses.V2.morphoCS_USDL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.V2.morphoCS_USDL.Underlying, addresses.USDL],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morphoCS_USDL.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['1x'],
        extraDailyCompound: false,
      },
    ],
  },
  morphoCS_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Coinshift'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morphoCS_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morphoCS_USDC.NewVault,
    strategyAddress: addresses.V2.morphoCS_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morphoCS_USDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morphoSE_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['SEAM', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Seamless'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoSE_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoSE_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoSE_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoSE_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  XVS_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/xvs.svg'],
    tokenAddress: addresses.ZKSYNC.XVS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['venus'],
    },
  },
  XVS_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/xvs.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.XVS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['venus'],
    },
  },
  venus_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg', './icons/xvs.svg'],
    apyTokenSymbols: ['ZK', 'XVS'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Venus'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.venus_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.venus_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_ETH.Underlying,
          addresses.ZKSYNC.V2.venus_ETH.cToken,
          addresses.ZKSYNC.V2.venus_ETH.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  venus_USDCe: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg', './icons/xvs.svg'],
    apyTokenSymbols: ['ZK', 'XVS'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['Venus'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.venus_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.venus_USDCe.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_USDCe.Underlying,
          addresses.ZKSYNC.V2.venus_USDCe.cToken,
          addresses.ZKSYNC.V2.venus_USDCe.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  venus_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Venus'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.venus_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.venus_USDT.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_USDT.Underlying,
          addresses.ZKSYNC.V2.venus_USDT.cToken,
          addresses.ZKSYNC.V2.venus_USDT.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  venus_WBTC: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['Venus'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.venus_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ZKSYNC.V2.venus_WBTC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_WBTC.Underlying,
          addresses.ZKSYNC.V2.venus_WBTC.cToken,
          addresses.ZKSYNC.V2.venus_WBTC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  venus_ZK: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg', './icons/xvs.svg'],
    apyTokenSymbols: ['ZK', 'XVS'],
    logoUrl: ['./icons/zk.svg'],
    tokenNames: ['ZK'],
    platform: ['Venus'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.venus_ZK.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.venus_ZK.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.venus_ZK.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ZKSYNC.V2.venus_ZK.Underlying,
          addresses.ZKSYNC.V2.venus_ZK.cToken,
          addresses.ZKSYNC.V2.venus_ZK.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  aave_ETH_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Aave'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.aave_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.aave_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.aave_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.aave_ETH.Underlying,
          addresses.ZKSYNC.V2.aave_ETH.AavePool,
          addresses.ZKSYNC.V2.aave_ETH.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  aave_USDC_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.aave_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.aave_USDC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.aave_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.aave_USDC.Underlying,
          addresses.ZKSYNC.V2.aave_USDC.AavePool,
          addresses.ZKSYNC.V2.aave_USDC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  aave_wstETH_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/wsteth.svg'],
    tokenNames: ['wstETH'],
    platform: ['Aave'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.ZKSYNC.V2.aave_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.aave_wstETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.aave_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.aave_wstETH.Underlying,
          addresses.ZKSYNC.V2.aave_wstETH.AavePool,
          addresses.ZKSYNC.V2.aave_wstETH.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_ETH_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['ZeroLend'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_ETH.Underlying,
          addresses.ZKSYNC.V2.zerolend_ETH.AavePool,
          addresses.ZKSYNC.V2.zerolend_ETH.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_USDC_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['ZeroLend'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_USDC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_USDC.Underlying,
          addresses.ZKSYNC.V2.zerolend_USDC.AavePool,
          addresses.ZKSYNC.V2.zerolend_USDC.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_USDCe_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['ZeroLend'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_USDCe.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_USDCe.Underlying,
          addresses.ZKSYNC.V2.zerolend_USDCe.AavePool,
          addresses.ZKSYNC.V2.zerolend_USDCe.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  zerolend_USDT_zksync: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['ZeroLend'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.zerolend_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.zerolend_USDT.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zerolend_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.ZKSYNC.V2.zerolend_USDT.Underlying,
          addresses.ZKSYNC.V2.zerolend_USDT.AavePool,
          addresses.ZKSYNC.V2.zerolend_USDT.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ZKSYNC,
        ],
      },
    ],
  },
  morphoMW_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['WELL', 'MORPHO'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Morpho - Moonwell Frontier'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoMW_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.morphoMW_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoMW_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoMW_cbBTC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoMW_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['WELL', 'MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Moonwell Flagship'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.morphoMW_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.morphoMW_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.morphoMW_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoMW_ETH.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoMW_EURC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['WELL', 'MORPHO'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Morpho - Moonwell Flagship'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoMW_EURC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoMW_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoMW_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoMW_EURC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  morphoMW_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['WELL', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Moonwell Flagship'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.morphoMW_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.morphoMW_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.morphoMW_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.BASE.V2.morphoMW_USDC.MorphoVault,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  zkswap_wrsETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zf.svg', './icons/zk.svg'],
    apyTokenSymbols: ['ZF', 'ZK'],
    logoUrl: ['./icons/wrseth.svg', './icons/eth.svg'],
    tokenNames: ['wrsETH', 'ETH'],
    platform: ['zkSwap'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_wrsETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_wrsETH_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_wrsETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_wrsETH_ETH.Underlying, 'WETH_zksync', 'wrsETH_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_wrsETH_ETH.Underlying,
          addresses.ZKSYNC.V2.zkswap_wrsETH_ETH.NewStrategy,
          28,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_MBTC_WBTC_stable: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/mbtc.svg', './icons/wbtc.svg'],
    tokenNames: ['MBTC', 'WBTC'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Stable'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_MBTC_WBTC_stable.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_MBTC_WBTC_stable.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_MBTC_WBTC_stable.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_MBTC_WBTC_stable.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_MBTC_WBTC_stable.Underlying,
          addresses.ZKSYNC.V2.syncswap_MBTC_WBTC_stable.NewStrategy,
          0,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_USDC_USDCe_stable: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdc.svg', './icons/usdc.svg'],
    tokenNames: ['USDC', 'USDC.e'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Stable'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_USDC_USDCe_stable.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_USDC_USDCe_stable.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_USDC_USDCe_stable.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_USDC_USDCe_stable.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_USDC_USDCe_stable.Underlying,
          addresses.ZKSYNC.V2.syncswap_USDC_USDCe_stable.NewStrategy,
          0,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_USDC_USDT_stable: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    tokenNames: ['USDC', 'USDT'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Stable'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_USDC_USDT_stable.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_USDC_USDT_stable.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_USDC_USDT_stable.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_USDC_USDT_stable.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_USDC_USDT_stable.Underlying,
          addresses.ZKSYNC.V2.syncswap_USDC_USDT_stable.NewStrategy,
          0,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_wstETH_ETH_aqua: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/steth.svg', './icons/eth.svg'],
    tokenNames: ['stETH', 'ETH'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Aqua'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_wstETH_ETH_aqua.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_wstETH_ETH_aqua.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_wstETH_ETH_aqua.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_wstETH_ETH_aqua.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_wstETH_ETH_aqua.Underlying,
          addresses.ZKSYNC.V2.syncswap_wstETH_ETH_aqua.NewStrategy,
          0,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_ZK_ETH_classic: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/zk.svg', './icons/eth.svg'],
    tokenNames: ['ZK', 'ETH'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Classic'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_ZK_ETH_classic.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_ZK_ETH_classic.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_ZK_ETH_classic.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_ZK_ETH_classic.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_ZK_ETH_classic.Underlying,
          addresses.ZKSYNC.V2.syncswap_ZK_ETH_classic.NewStrategy,
          0,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  IPOR_USDC_arbitrum_old: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    id: 'IPOR_USDC_arbitrum_old',
    isIPORVault: true,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Autopilot'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum_old.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum_old.NewVault,
    vaultDecimals: '8',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IPOR,
        params: [
          addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum_old.Underlying,
          addresses.ARBITRUM_ONE.V2.IPOR_USDC_arbitrum_old.NewVault,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_cbBTC_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Aave'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.aave_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.aave_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.aave_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.BASE.V2.aave_cbBTC.Underlying,
          addresses.BASE.V2.aave_cbBTC.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  aave_ETH_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Aave'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.aave_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aave_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aave_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.BASE.V2.aave_ETH.Underlying,
          addresses.BASE.V2.aave_ETH.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  aave_USDbC_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdbc.svg'],
    tokenNames: ['USDbC'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.aave_USDbC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.aave_USDbC.NewVault,
    strategyAddress: addresses.BASE.V2.aave_USDbC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.BASE.V2.aave_USDbC.Underlying,
          addresses.BASE.V2.aave_USDbC.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  aave_USDC_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.aave_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.aave_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aave_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.BASE.V2.aave_USDC.Underlying,
          addresses.BASE.V2.aave_USDC.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  compound_AERO: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/aero.svg'],
    tokenNames: ['AERO'],
    platform: ['Compound V3'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.compound_AERO.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.compound_AERO.NewVault,
    strategyAddress: addresses.BASE.V2.compound_AERO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aerodrome-finance'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.BASE.V2.compound_AERO.Underlying,
          addresses.BASE.V2.compound_AERO.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  USDC_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.compound_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.compound_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.compound_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.BASE.V2.compound_USDC.Underlying,
          addresses.BASE.V2.compound_USDC.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
  },
  aave_ETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Aave'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_ETH.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  compound_ETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Compound V3'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.compound_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.compound_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.compound_ETH.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['weth'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.ARBITRUM_ONE.V2.compound_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.compound_ETH.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  compound_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.compound_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.compound_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.compound_USDC.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['usd-coin'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.ARBITRUM_ONE.V2.compound_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.compound_USDC.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  compound_USDCe_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.compound_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.compound_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.compound_USDCe.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['usd-coin'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.ARBITRUM_ONE.V2.compound_USDCe.Underlying,
          addresses.ARBITRUM_ONE.V2.compound_USDCe.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  compound_USDT_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.compound_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.compound_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.compound_USDT.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['tether'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.ARBITRUM_ONE.V2.compound_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.compound_USDT.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  ZERO: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/zero.svg'],
    tokenAddress: addresses.ZERO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['zerolend'] },
  },
  eZERO: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/zero.svg'],
    tokenAddress: addresses.eZERO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['zerolend'] },
  },
  WBTC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    platform: ['Morpho - Re7'],
    tags: ['Beginner'],
    tokenAddress: addresses.WBTC,
    decimals: '8',
    vaultAddress: addresses.V2.WBTC.NewVault,
    strategyAddress: addresses.V2.WBTC.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [addresses.V2.WBTC.MorphoVault, profitSharingCut15Percent, CHAIN_IDS.ETH_MAINNET],
      },
    ],
  },
  zerolend_cbBTC: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Beginner'],
    tokenAddress: addresses.V2.zerolend_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.V2.zerolend_cbBTC.NewVault,
    strategyAddress: addresses.V2.zerolend_cbBTC.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['coinbase-wrapped-btc'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_cbBTC.Underlying,
          addresses.V2.zerolend_cbBTC.AavePool,
          addresses.V2.zerolend_cbBTC.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  zerolend_LBTC: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/lbtc.svg'],
    tokenNames: ['LBTC'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.zerolend_LBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.V2.zerolend_LBTC.NewVault,
    strategyAddress: addresses.V2.zerolend_LBTC.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['lombard-staked-btc'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_LBTC.Underlying,
          addresses.V2.zerolend_LBTC.AavePool,
          addresses.V2.zerolend_LBTC.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  zerolend_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.zerolend_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.zerolend_USDC.NewVault,
    strategyAddress: addresses.V2.zerolend_USDC.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['usd-coin'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_USDC.Underlying,
          addresses.V2.zerolend_USDC.AavePool,
          addresses.V2.zerolend_USDC.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  zerolend_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.zerolend_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.zerolend_USDT.NewVault,
    strategyAddress: addresses.V2.zerolend_USDT.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['tether'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_USDT.Underlying,
          addresses.V2.zerolend_USDT.AavePool,
          addresses.V2.zerolend_USDT.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  zerolend_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Beginner'],
    tokenAddress: addresses.V2.zerolend_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.zerolend_ETH.NewVault,
    strategyAddress: addresses.V2.zerolend_ETH.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['weth'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_ETH.Underlying,
          addresses.V2.zerolend_ETH.AavePool,
          addresses.V2.zerolend_ETH.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  zerolend_pzETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/pzeth.svg'],
    tokenNames: ['pzETH'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Beginner', 'LSD'],
    tokenAddress: addresses.V2.zerolend_pzETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.zerolend_pzETH.NewVault,
    strategyAddress: addresses.V2.zerolend_pzETH.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['renzo-restaked-lst'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_pzETH.Underlying,
          addresses.V2.zerolend_pzETH.AavePool,
          addresses.V2.zerolend_pzETH.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  zerolend_weETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/weeth.svg'],
    tokenNames: ['weETH'],
    apyIconUrls: ['./icons/zero.svg'],
    apyTokenSymbols: ['ZERO'],
    platform: ['ZeroLend'],
    tags: ['Beginner', 'LSD'],
    tokenAddress: addresses.V2.zerolend_weETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.zerolend_weETH.NewVault,
    strategyAddress: addresses.V2.zerolend_weETH.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['wrapped-eeth'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.zerolend_weETH.Underlying,
          addresses.V2.zerolend_weETH.AavePool,
          addresses.V2.zerolend_weETH.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  USDe_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usde.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDe,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['ethena-usde'] },
  },
  USDx_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdx.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDx,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['synthetix-usdx'] },
  },
  zunETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/zuneth.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.zunETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['zunami-eth-2'] },
  },
  zunUSD_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/zunusd.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.zunUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['zunami-usd'] },
  },
  curve_USDe_USDx: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/usde.svg', './icons/usdx.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['USDe', 'USDx'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.Underlying,
        '18',
        ['USDe_arbitrum', 'USDx_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_USDe_USDx.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  curve_zunETH_ETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/zuneth.svg', './icons/eth.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenNames: ['zunETH', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.Underlying,
        '18',
        ['zunETH_arbitrum', 'WETH_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_zunETH_ETH.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  curve_zunUSD_crvUSD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/zunusd.svg', './icons/curve.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['zunUSD', 'crvUSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.Underlying,
        '18',
        ['zunUSD_arbitrum', 'crvUSD_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_zunUSD_crvUSD.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  curve_ETHp_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/ethplus.svg', './icons/eth.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenNames: ['ETH+', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.Underlying,
        '18',
        ['ETHplus_arbitrum', 'WETH_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_ETHp_ETH.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  curve_KNOX_eUSD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/knox.svg', './icons/eusd.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stabe'],
    tokenNames: ['KNOX', 'eUSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.Underlying,
        '18',
        ['KNOX', 'eUSD_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_KNOX_eUSD.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  extrafi_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.extrafi_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_cbBTC.RewardPool,
          addresses.BASE.V2.extrafi_cbBTC.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_VIRTUAL: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/virtual.svg'],
    tokenNames: ['VIRTUAL'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_VIRTUAL.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_VIRTUAL.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_VIRTUAL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['virtual-protocol'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_VIRTUAL.RewardPool,
          addresses.BASE.V2.extrafi_VIRTUAL.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_ETH.RewardPool,
          addresses.BASE.V2.extrafi_ETH.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_wrsETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/wrseth.svg'],
    tokenNames: ['wrsETH'],
    platform: ['Moonwell'],
    tags: ['Beginner', 'LSD'],
    tokenAddress: addresses.BASE.V2.moonwell_wrsETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_wrsETH.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_wrsETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-rseth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_wrsETH.Underlying,
          addresses.BASE.V2.moonwell_wrsETH.mToken,
          addresses.BASE.V2.moonwell_wrsETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_WELL_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/well.svg', './icons/eth.svg'],
    tokenNames: ['WELL', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_WELL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_WELL_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_WELL_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_WELL_ETH.Underlying, 'WELL', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_WELL_ETH.Underlying,
          addresses.BASE.V2.aerodrome_WELL_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  APE_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/ape.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.APE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['apecoin'],
    },
  },
  TESTING_gmx_gmBTC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/wbtc.svg'],
    apyTokenSymbols: ['WBTC'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['TESTING'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.TESTING_gmx_gmBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.TESTING_gmx_gmBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.TESTING_gmx_gmBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.0'],
      },
    ],
  },
  ION_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/ion.svg'],
    tokenAddress: addresses.BASE.ION,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ionic-protocol'],
    },
  },
  VIRTUAL_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/virtual.svg'],
    tokenAddress: addresses.BASE.VIRTUAL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['virtual-protocol'],
    },
  },
  aerodrome_jEUR_EURC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/jeur.svg', './icons/eurc.svg'],
    tokenNames: ['jEUR', 'EURC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_jEUR_EURC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_jEUR_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_jEUR_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_jEUR_EURC.Underlying, 'jEUR_base', 'EURC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_jEUR_EURC.Underlying,
          addresses.BASE.V2.aerodrome_jEUR_EURC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_ION_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/ion.svg', './icons/eth.svg'],
    tokenNames: ['ION', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_ION_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_ION_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_ION_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_ION_ETH.Underlying, 'ION_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_ION_ETH.Underlying,
          addresses.BASE.V2.aerodrome_ION_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_VIRTUAL_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/virtual.svg', './icons/cbbtc.svg'],
    tokenNames: ['VIRTUAL', 'cbBTC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_VIRTUAL_cbBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_VIRTUAL_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_VIRTUAL_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.BASE.V2.aerodrome_VIRTUAL_cbBTC.Underlying,
        'VIRTUAL_base',
        'moonwell_cbBTC',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_VIRTUAL_cbBTC.Underlying,
          addresses.BASE.V2.aerodrome_VIRTUAL_cbBTC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  MORE: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.MORE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['stack-2'],
    },
  },
  GYD: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.GYD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gyroscope-gyd'],
    },
  },
  sUSDe: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.sUSDe,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ethena-staked-usde'],
    },
  },
  sFRAX_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.sFRAX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['staked-frax'],
    },
  },
  waFRAX_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waFRAX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ARBITRUM_ONE.waFRAX, addresses.ARBITRUM_ONE.aFRAX, CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  aFRAX_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.aFRAX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax'],
    },
  },
  waGHO_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waGHO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ARBITRUM_ONE.waGHO, addresses.ARBITRUM_ONE.aGHO, CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  aGHO_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.aGHO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gho'],
    },
  },
  waUSDC_arbitrum_new: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waUSDC_new,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.waUSDC_new,
        addresses.ARBITRUM_ONE.aUSDC_new,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  aUSDC_arbitrum_new: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.aUSDC_new,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  waUSDT_arbitrum_new: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waUSDT_new,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.waUSDT_new,
        addresses.ARBITRUM_ONE.aUSDT_new,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  aUSDT_arbitrum_new: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.aUSDT_new,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  balancer_MORE_GYD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/usdc.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'USDC'],
    logoUrl: ['./icons/more.svg', './icons/gyd.svg'],
    tokenNames: ['MORE', 'GYD'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_MORE_GYD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_MORE_GYD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_MORE_GYD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_MORE_GYD.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_MORE_GYD.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['more_gyd_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_sUSDe_GYD: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/susde.svg', './icons/gyd.svg'],
    tokenNames: ['sUSDe', 'GYD'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_sUSDe_GYD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_sUSDe_GYD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_sUSDe_GYD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_sUSDe_GYD.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_sUSDe_GYD.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['susde_gyd_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_waFRAX_sFRAX: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/am-frax.svg', './icons/sfrax.svg'],
    tokenNames: ['waFRAX', 'sFRAX'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_waFRAX_sFRAX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_waFRAX_sFRAX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_waFRAX_sFRAX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_waFRAX_sFRAX.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_waFRAX_sFRAX.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wafrax_sfrax_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_waGHO_GYD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/am-gho.svg', './icons/gyd.svg'],
    tokenNames: ['waGHO', 'GYD'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_waGHO_GYD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_waGHO_GYD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_waGHO_GYD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_waGHO_GYD.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_waGHO_GYD.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wagho_gyd_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_waUSDC_GHO: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg', './icons/gho.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB', 'GHO'],
    logoUrl: ['./icons/am-usdc.svg', './icons/gho.svg'],
    tokenNames: ['waUSDC', 'GHO'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GHO.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GHO.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GHO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GHO.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GHO.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wausdc_gho_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_waUSDC_GYD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/am-usdc.svg', './icons/gyd.svg'],
    tokenNames: ['waUSDC', 'GYD'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GYD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GYD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GYD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GYD.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_waUSDC_GYD.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wausdc_gyd_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_waUSDT_GYD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/am-usdt.svg', './icons/gyd.svg'],
    tokenNames: ['waUSDT', 'GYD'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDT_GYD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDT_GYD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_waUSDT_GYD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_waUSDT_GYD.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_waUSDT_GYD.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wausdt_gyd_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_wstETH_GYD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/wsteth.svg', './icons/gyd.svg'],
    tokenNames: ['wstETH', 'GYD'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_wstETH_GYD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_wstETH_GYD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_wstETH_GYD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_wstETH_GYD.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_wstETH_GYD.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wsteth_gyd_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  morpho_GauntletDAI: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/dai.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['DAI', 'MORPHO'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_GauntletDAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.morpho_GauntletDAI.NewVault,
    strategyAddress: addresses.V2.morpho_GauntletDAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_GauntletDAI.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_GauntletETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/eth.svg', './icons/usdc.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['ETH', 'USDC', 'MORPHO'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner'],
    tokenAddress: addresses.V2.morpho_GauntletETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.morpho_GauntletETH.NewVault,
    strategyAddress: addresses.V2.morpho_GauntletETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_GauntletETH.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  morpho_GauntletUSDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg', './icons/eth.svg', './icons/morpho.svg'],
    apyTokenSymbols: ['USDC', 'ETH', 'MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.morpho_GauntletUSDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.morpho_GauntletUSDC.NewVault,
    strategyAddress: addresses.V2.morpho_GauntletUSDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [
          addresses.V2.morpho_GauntletUSDC.MorphoVault,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  aUSDS: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.aUSDS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usds'],
    },
  },
  aave_USDS: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usds.svg'],
    apyTokenSymbols: ['USDS'],
    logoUrl: ['./icons/usds.svg'],
    tokenNames: ['USDS'],
    platform: ['Aave'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.aave_USDS.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.aave_USDS.NewVault,
    strategyAddress: addresses.V2.aave_USDS.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usds'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_FOLD,
        params: [
          addresses.V2.aave_USDS.Underlying,
          addresses.V2.aave_USDS.AavePool,
          addresses.V2.aave_USDS.NewStrategy,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  syncswap_ETH_USDCe_aqua: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    tokenNames: ['ETH', 'USDC.e'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Aqua'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.Underlying,
        'USDCe_zksync',
        'WETH_zksync',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.Underlying,
          addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.NewStrategy,
          addresses.ZKSYNC.V2.syncswap_ETH_USDCe_aqua.StakingPool,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_ETH_USDCe_classic: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    tokenNames: ['ETH', 'USDC.e'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Classic'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.Underlying,
          addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.NewStrategy,
          addresses.ZKSYNC.V2.syncswap_ETH_USDCe_classic.StakingPool,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_USDCe_USDT_stable: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    tokenNames: ['USDC.e', 'USDT'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Stable'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.SYNCSWAP_POOL,
      params: [addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.Underlying],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.Underlying,
          addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.NewStrategy,
          addresses.ZKSYNC.V2.syncswap_USDCe_USDT_stable.StakingPool,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  syncswap_wrsETH_ETH_aqua: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/wrseth.svg', './icons/eth.svg'],
    tokenNames: ['wrsETH', 'ETH'],
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    platform: ['SyncSwap - Aqua'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.Underlying,
        'wrsETH_zksync',
        'WETH_zksync',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SYNCSWAP,
        params: [
          addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.Underlying,
          addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.NewStrategy,
          addresses.ZKSYNC.V2.syncswap_wrsETH_ETH_aqua.StakingPool,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  dolomite_DAI: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/dai.svg'],
    apyTokenSymbols: ['DAI'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Dolomite'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_DAI.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_DAI.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  dolomite_ETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Dolomite'],
    tags: ['Beginner'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_ETH.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  dolomite_GMX: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/gmx.svg'],
    apyTokenSymbols: ['GMX'],
    logoUrl: ['./icons/gmx.svg'],
    tokenNames: ['GMX'],
    platform: ['Dolomite'],
    tags: ['Beginner'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_GMX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_GMX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_GMX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gmx'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_GMX.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  dolomite_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Dolomite'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_USDC.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  dolomite_USDCe: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC.e'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['Dolomite'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_USDCe.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  dolomite_USDT: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdt.svg'],
    apyTokenSymbols: ['USDT'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Dolomite'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_USDT.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  dolomite_WBTC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/wbtc.svg'],
    apyTokenSymbols: ['WBTC'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['Dolomite'],
    tags: ['Beginner'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.dolomite_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.dolomite_WBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.dolomite_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.DOLOMITE_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.dolomite_WBTC.MarketId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  fluid_ETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Fluid'],
    tags: ['Beginner'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.fluid_ETH_arbitrum.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.fluid_ETH_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.fluid_ETH_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.fluid_ETH_arbitrum.fToken,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  fluid_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Fluid'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.fluid_USDC_arbitrum.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.fluid_USDC_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.fluid_USDC_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.fluid_USDC_arbitrum.fToken,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  fluid_USDT_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/usdt.svg'],
    apyTokenSymbols: ['USDT'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Fluid'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.fluid_USDT_arbitrum.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.fluid_USDT_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.fluid_USDT_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [
          addresses.ARBITRUM_ONE.V2.fluid_USDT_arbitrum.fToken,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  fluid_ETH_mainnet: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Fluid'],
    tags: ['Beginner'],
    tokenAddress: addresses.V2.fluid_ETH_mainnet.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.fluid_ETH_mainnet.NewVault,
    strategyAddress: addresses.V2.fluid_ETH_mainnet.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [
          addresses.V2.fluid_ETH_mainnet.fToken,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  fluid_USDC_mainnet: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Fluid'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.fluid_USDC_mainnet.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.fluid_USDC_mainnet.NewVault,
    strategyAddress: addresses.V2.fluid_USDC_mainnet.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [
          addresses.V2.fluid_USDC_mainnet.fToken,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  fluid_USDT_mainnet: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/usdt.svg'],
    apyTokenSymbols: ['USDT'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Fluid'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.V2.fluid_USDT_mainnet.Underlying,
    decimals: '6',
    vaultAddress: addresses.V2.fluid_USDT_mainnet.NewVault,
    strategyAddress: addresses.V2.fluid_USDT_mainnet.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [
          addresses.V2.fluid_USDT_mainnet.fToken,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  fluid_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['ETH'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Fluid'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.fluid_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.fluid_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.fluid_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [addresses.BASE.V2.fluid_ETH.fToken, profitSharingCut10Percent, CHAIN_IDS.BASE],
      },
    ],
  },
  fluid_EURC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/eurc.svg'],
    apyTokenSymbols: ['EURC'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Fluid'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.fluid_EURC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.fluid_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.fluid_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [addresses.BASE.V2.fluid_EURC.fToken, profitSharingCut10Percent, CHAIN_IDS.BASE],
      },
    ],
  },
  fluid_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/usdc.svg'],
    apyTokenSymbols: ['USDC'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Fluid'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.fluid_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.fluid_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.fluid_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.FLUID_LEND,
        params: [addresses.BASE.V2.fluid_USDC.fToken, profitSharingCut10Percent, CHAIN_IDS.BASE],
      },
    ],
  },
  NOTE_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.NOTE,
    decimals: '8',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['notional-finance'],
    },
  },
  notional_nETH_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['nETH'],
    apyIconUrls: ['./icons/note.svg'],
    apyTokenSymbols: ['NOTE'],
    platform: ['NotionalV3'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.notional_nETH_arbitrum.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.notional_nETH_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.notional_nETH_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [
        1,
        addresses.ARBITRUM_ONE.V2.notional_nETH_arbitrum.Underlying,
        addresses.ARBITRUM_ONE.WETH,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          1,
          addresses.ARBITRUM_ONE.NOTE,
          addresses.ARBITRUM_ONE.V2.notional_nETH_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.WETH,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  notional_nUSDC_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['nUSDC'],
    apyIconUrls: ['./icons/note.svg'],
    apyTokenSymbols: ['NOTE'],
    platform: ['NotionalV3'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.notional_nUSDC_arbitrum.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.notional_nUSDC_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.notional_nUSDC_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [
        3,
        addresses.ARBITRUM_ONE.V2.notional_nUSDC_arbitrum.Underlying,
        addresses.ARBITRUM_ONE.USDC,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          3,
          addresses.ARBITRUM_ONE.NOTE,
          addresses.ARBITRUM_ONE.V2.notional_nUSDC_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.USDC,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  notional_nUSDT_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['nUSDT'],
    apyIconUrls: ['./icons/note.svg'],
    apyTokenSymbols: ['NOTE'],
    platform: ['NotionalV3'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.notional_nUSDT_arbitrum.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.notional_nUSDT_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.notional_nUSDT_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [
        8,
        addresses.ARBITRUM_ONE.V2.notional_nUSDT_arbitrum.Underlying,
        addresses.ARBITRUM_ONE.USDT,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          8,
          addresses.ARBITRUM_ONE.NOTE,
          addresses.ARBITRUM_ONE.V2.notional_nUSDT_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.USDT,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aerodrome_cbBTC_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/cbbtc.svg', './icons/eth.svg'],
    tokenNames: ['cbBTC', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_cbBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_cbBTC_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_cbBTC_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_cbBTC_ETH.Underlying, 'moonwell_cbBTC', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_cbBTC_ETH.Underlying,
          addresses.BASE.V2.aerodrome_cbBTC_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_cbBTC_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/cbbtc.svg', './icons/usdc.svg'],
    tokenNames: ['cbBTC', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_cbBTC_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_cbBTC_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_cbBTC_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_cbBTC_USDC.Underlying, 'moonwell_cbBTC', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_cbBTC_USDC.Underlying,
          addresses.BASE.V2.aerodrome_cbBTC_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_EURC_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/eurc.svg', './icons/eth.svg'],
    tokenNames: ['EURC', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_EURC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_EURC_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_EURC_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_EURC_ETH.Underlying, 'EURC_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_EURC_ETH.Underlying,
          addresses.BASE.V2.aerodrome_EURC_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_EURC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/eurc.svg'],
    tokenNames: ['EURC'],
    platform: ['Moonwell'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.moonwell_EURC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.moonwell_EURC.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_EURC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_EURC.Underlying,
          addresses.BASE.V2.moonwell_EURC.mToken,
          addresses.BASE.V2.moonwell_EURC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_cbBTC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/cbbtc.svg'],
    tokenNames: ['cbBTC'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_cbBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.BASE.V2.moonwell_cbBTC.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_cbBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-btc'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_cbBTC.Underlying,
          addresses.BASE.V2.moonwell_cbBTC.mToken,
          addresses.BASE.V2.moonwell_cbBTC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  EXTRA: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/extra.svg'],
    tokenAddress: addresses.BASE.EXTRA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['extra-finance'] },
  },
  extrafi_AERO: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/aero.svg'],
    tokenNames: ['AERO'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_AERO.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_AERO.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_AERO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aerodrome-finance'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_AERO.RewardPool,
          addresses.BASE.V2.extrafi_AERO.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_DOLA: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/dola.svg'],
    tokenNames: ['DOLA'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.extrafi_DOLA.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_DOLA.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_DOLA.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dola-usd'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_DOLA.RewardPool,
          addresses.BASE.V2.extrafi_DOLA.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_KLIMA: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/klima.png'],
    tokenNames: ['KLIMA'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_KLIMA.Underlying,
    decimals: '9',
    vaultAddress: addresses.BASE.V2.extrafi_KLIMA.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_KLIMA.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['klima-dao'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_KLIMA.RewardPool,
          addresses.BASE.V2.extrafi_KLIMA.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_OVN: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/ovn.svg'],
    tokenNames: ['OVN'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_OVN.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_OVN.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_OVN.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['overnight-finance'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_OVN.RewardPool,
          addresses.BASE.V2.extrafi_OVN.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/usdbc.svg'],
    tokenNames: ['USDbC'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.extrafi_USDbC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.extrafi_USDbC.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_USDbC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_USDbC.RewardPool,
          addresses.BASE.V2.extrafi_USDbC.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  axlOP_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/op.svg'],
    tokenAddress: addresses.BASE.axlOP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['optimism'] },
  },
  extrafi_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg', './icons/op.svg'],
    apyTokenSymbols: ['EXTRA', 'axlOP'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['ExtraFi - Lend Pool #2'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.extrafi_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.extrafi_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_USDC.RewardPool,
          addresses.BASE.V2.extrafi_USDC.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_USDplus: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/usdplus.svg'],
    tokenNames: ['USD+'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.extrafi_USDplus.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.extrafi_USDplus.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_USDplus.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['overnight-fi-usd-base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_USDplus.RewardPool,
          addresses.BASE.V2.extrafi_USDplus.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_USDz: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/usdz.svg'],
    tokenNames: ['USDz'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.BASE.V2.extrafi_USDz.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_USDz.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_USDz.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['anzen-usdz'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_USDz.RewardPool,
          addresses.BASE.V2.extrafi_USDz.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  extrafi_WELL: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/extra.svg'],
    apyTokenSymbols: ['EXTRA'],
    logoUrl: ['./icons/well.svg'],
    tokenNames: ['WELL'],
    platform: ['ExtraFi - Lend'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.extrafi_WELL.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.extrafi_WELL.NewVault,
    strategyAddress: addresses.BASE.V2.extrafi_WELL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['moonwell-artemis'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.EXTRAFI_LEND,
        params: [
          addresses.BASE.V2.extrafi_WELL.RewardPool,
          addresses.BASE.V2.extrafi_WELL.ReserveId,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  reactor_ZK: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/zk.svg'],
    tokenNames: ['ZK'],
    platform: ['ReactorFusion'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.reactor_ZK.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.reactor_ZK.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.reactor_ZK.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.REACTORFUSION_FOLD,
        params: [
          addresses.ZKSYNC.V2.reactor_ZK.Underlying,
          addresses.ZKSYNC.V2.reactor_ZK.cToken,
          addresses.ZKSYNC.V2.reactor_ZK.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  penpie_agETH2612: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/agethlp.svg'],
    tokenNames: ['agETH-LP (26-DEC-24)'],
    platform: ['Penpie', 'Kelp Gain'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.V2.penpie_agETH2612.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.penpie_agETH2612.NewVault,
    strategyAddress: addresses.V2.penpie_agETH2612.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.V2.penpie_agETH2612.Underlying, CHAIN_IDS.ETH_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.V2.penpie_agETH2612.Underlying,
          CHAIN_IDS.ETH_MAINNET,
          profitSharingCut15Percent,
        ],
      },
    ],
  },
  eUSD_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/eusd.svg'],
    tokenAddress: addresses.BASE.eUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['electronic-usd'] },
  },
  ezETH_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/ezeth.svg'],
    tokenAddress: addresses.BASE.ezETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['renzo-restaked-eth'] },
  },
  jEUR_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/jeur.svg'],
    tokenAddress: addresses.BASE.jEUR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['jarvis-synthetic-euro'] },
  },
  agEUR_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/ageur.svg'],
    tokenAddress: addresses.BASE.agEUR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['ageur'] },
  },
  msETH_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/mseth.svg'],
    tokenAddress: addresses.BASE.msETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.AERODROME_PAIR,
      params: [addresses.BASE.msETH, addresses.BASE.WETH, 6, true],
    },
  },
  msUSD_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/msusd.svg'],
    tokenAddress: addresses.BASE.msUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.AERODROME_PAIR,
      params: [addresses.BASE.msUSD, addresses.BASE.USDC_bridged, 6, true],
    },
  },
  USDCplus_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/usdcplus.svg'],
    tokenAddress: addresses.BASE.USDC_plus,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usdc-plus-overnight'],
    },
  },
  USDz_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/usdz.svg'],
    tokenAddress: addresses.BASE.USDz,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['anzen-usdz'],
    },
  },
  agUSD_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/usda.svg'],
    tokenAddress: addresses.BASE.agUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['angle-usd'],
    },
  },
  EURC_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/eurc.svg'],
    tokenAddress: addresses.BASE.EURC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['euro-coin'],
    },
  },
  GHST_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/ghst.svg'],
    tokenAddress: addresses.BASE.GHST,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aavegotchi'],
    },
  },
  hyUSD_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/hyusd.svg'],
    tokenAddress: addresses.BASE.hyUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['high-yield-usd-base'],
    },
  },
  wrsETH_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/wrsETH.svg'],
    tokenAddress: addresses.BASE.wrsETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-rseth'],
    },
  },
  aerodrome_DOLA_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/dola.svg', './icons/usdc.svg'],
    tokenNames: ['DOLA', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_DOLA_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_DOLA_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_DOLA_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_DOLA_USDC.Underlying, 'DOLA_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_DOLA_USDC.Underlying,
          addresses.BASE.V2.aerodrome_DOLA_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_eUSD_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/eusd.svg', './icons/usdc.svg'],
    tokenNames: ['eUSD', 'USDC'],
    platform: ['Aerodrome', 'Reserve'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_eUSD_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_eUSD_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_eUSD_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_eUSD_USDC.Underlying, 'eUSD_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_eUSD_USDC.Underlying,
          addresses.BASE.V2.aerodrome_eUSD_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_ezETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/ezeth.svg', './icons/eth.svg'],
    tokenNames: ['ezETH', 'ETH'],
    platform: ['Aerodrome', 'Renzo'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.BASE.V2.aerodrome_ezETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_ezETH_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_ezETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_ezETH_ETH.Underlying, 'ezETH_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_ezETH_ETH.Underlying,
          addresses.BASE.V2.aerodrome_ezETH_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_jEUR_EURA: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/jeur.svg', './icons/eura.svg'],
    tokenNames: ['jEUR', 'EURA'],
    platform: ['Aerodrome', 'Jarvis', 'agEUR', 'Angle'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_jEUR_EURA.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_jEUR_EURA.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_jEUR_EURA.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_jEUR_EURA.Underlying, 'jEUR_base', 'agEUR_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_jEUR_EURA.Underlying,
          addresses.BASE.V2.aerodrome_jEUR_EURA.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_msETH_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/mseth.svg', './icons/eth.svg'],
    tokenNames: ['msETH', 'ETH'],
    platform: ['Aerodrome', 'Metronome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_msETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_msETH_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_msETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_msETH_ETH.Underlying, 'msETH_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_msETH_ETH.Underlying,
          addresses.BASE.V2.aerodrome_msETH_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_msUSD_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/msusd.svg', './icons/usdc.svg'],
    tokenNames: ['msUSD', 'USDC'],
    platform: ['Aerodrome', 'Metronome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_msUSD_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_msUSD_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_msUSD_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_msUSD_USDC.Underlying, 'msUSD_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_msUSD_USDC.Underlying,
          addresses.BASE.V2.aerodrome_msUSD_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_rETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/reth.svg', './icons/eth.svg'],
    tokenNames: ['rETH', 'ETH'],
    platform: ['Aerodrome', 'Rocketpool'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.BASE.V2.aerodrome_rETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_rETH_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_rETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_rETH_ETH.Underlying, 'moonwell_rETH', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_rETH_ETH.Underlying,
          addresses.BASE.V2.aerodrome_rETH_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_USDp_USDCp: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/usdplus.svg', './icons/usdcplus.svg'],
    tokenNames: ['USD+', 'USDC+'],
    platform: ['Aerodrome', 'Overnight'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_USDp_USDCp.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_USDp_USDCp.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_USDp_USDCp.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_USDp_USDCp.Underlying, 'USDplus_base', 'USDCplus_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_USDp_USDCp.Underlying,
          addresses.BASE.V2.aerodrome_USDp_USDCp.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_USDz_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/usdz.svg', './icons/usdc.svg'],
    tokenNames: ['USDz', 'USDC'],
    platform: ['Aerodrome', 'Anzen'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_USDz_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_USDz_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_USDz_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_USDz_USDC.Underlying, 'USDz_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_USDz_USDC.Underlying,
          addresses.BASE.V2.aerodrome_USDz_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_EURA_USDA: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/eura.svg', './icons/usda.svg'],
    tokenNames: ['EURA', 'USDA'],
    platform: ['Aerodrome', 'agEUR', 'agUSD', 'Angle'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_EURA_USDA.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_EURA_USDA.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_EURA_USDA.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_EURA_USDA.Underlying, 'agEUR_base', 'agUSD_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_EURA_USDA.Underlying,
          addresses.BASE.V2.aerodrome_EURA_USDA.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_EURC_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/eurc.svg', './icons/usdc.svg'],
    tokenNames: ['EURC', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_EURC_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_EURC_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_EURC_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_EURC_USDC.Underlying, 'EURC_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_EURC_USDC.Underlying,
          addresses.BASE.V2.aerodrome_EURC_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_GHST_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/ghst.svg', './icons/eth.svg'],
    tokenNames: ['GHST', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_GHST_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_GHST_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_GHST_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_GHST_ETH.Underlying, 'GHST_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_GHST_ETH.Underlying,
          addresses.BASE.V2.aerodrome_GHST_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_hyUSD_eUSD: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/hyusd.svg', './icons/eusd.svg'],
    tokenNames: ['hyUSD', 'eUSD'],
    platform: ['Aerodrome', 'Reserve'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_hyUSD_eUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_hyUSD_eUSD.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_hyUSD_eUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_hyUSD_eUSD.Underlying, 'hyUSD_base', 'eUSD_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_hyUSD_eUSD.Underlying,
          addresses.BASE.V2.aerodrome_hyUSD_eUSD.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_weETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/weeth.svg', './icons/eth.svg'],
    tokenNames: ['weETH', 'ETH'],
    platform: ['Aerodrome', 'ether.fi'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.BASE.V2.aerodrome_weETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_weETH_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_weETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_weETH_ETH.Underlying, 'moonwell_weETH', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_weETH_ETH.Underlying,
          addresses.BASE.V2.aerodrome_weETH_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  aerodrome_wrsETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/wrseth.svg', './icons/eth.svg'],
    tokenNames: ['wrsETH', 'ETH'],
    platform: ['Aerodrome', 'Kelp DAO'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.BASE.V2.aerodrome_wrsETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_wrsETH_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_wrsETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_wrsETH_ETH.Underlying, 'wrsETH_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_wrsETH_ETH.Underlying,
          addresses.BASE.V2.aerodrome_wrsETH_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  dlcBTC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/dlcbtc.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.dlcBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['dlc-link-dlcbtc'] },
  },
  curve_dlcBTC_WBTC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/dlcbtc.svg'],
    apyTokenSymbols: ['dlcBTC'],
    logoUrl: ['./icons/dlcbtc.svg', './icons/wbtc.svg'],
    tokenNames: ['dlcBTC', 'WBTC'],
    platform: ['Curve'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.Underlying,
        '18',
        ['WBTC_arbitrum', 'dlcBTC'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CURVE_GAUGE,
        params: [
          'curve_dlcBTC_WBTC',
          addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.Gauge,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
          addresses.ARBITRUM_ONE.V2.curve_dlcBTC_WBTC.NewStrategy,
        ],
      },
    ],
  },
  moonwell_weETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/weeth.svg'],
    tokenNames: ['weETH'],
    platform: ['Moonwell'],
    tags: ['Beginner', 'LSD'],
    tokenAddress: addresses.BASE.V2.moonwell_weETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_weETH.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_weETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-eeth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_weETH.Underlying,
          addresses.BASE.V2.moonwell_weETH.mToken,
          addresses.BASE.V2.moonwell_weETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  moonwell_AERO: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/aero.svg'],
    tokenNames: ['AERO'],
    platform: ['Moonwell'],
    tags: ['Beginner'],
    tokenAddress: addresses.BASE.V2.moonwell_AERO.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_AERO.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_AERO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aerodrome-finance'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_SUPPLY,
        params: [
          addresses.BASE.V2.moonwell_AERO.Underlying,
          addresses.BASE.V2.moonwell_AERO.mToken,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  NOTE: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.NOTE,
    decimals: '8',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['notional-finance'],
    },
  },
  GHO: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.GHO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gho'],
    },
  },
  notional_nETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['nETH'],
    apyIconUrls: ['./icons/note.svg'],
    apyTokenSymbols: ['NOTE'],
    platform: ['NotionalV3'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.notional_nETH.Underlying,
    decimals: '8',
    vaultAddress: addresses.V2.notional_nETH.NewVault,
    strategyAddress: addresses.V2.notional_nETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [1, addresses.V2.notional_nETH.Underlying, addresses.WETH, CHAIN_IDS.ETH_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          1,
          addresses.NOTE,
          addresses.V2.notional_nETH.Underlying,
          addresses.WETH,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  notional_nGHO: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/gho.svg'],
    tokenNames: ['nGHO'],
    apyIconUrls: ['./icons/note.svg', './icons/gho.svg'],
    apyTokenSymbols: ['NOTE', 'GHO'],
    platform: ['NotionalV3'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.notional_nGHO.Underlying,
    decimals: '8',
    vaultAddress: addresses.V2.notional_nGHO.NewVault,
    strategyAddress: addresses.V2.notional_nGHO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [11, addresses.V2.notional_nGHO.Underlying, addresses.GHO, CHAIN_IDS.ETH_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          11,
          addresses.NOTE,
          addresses.V2.notional_nGHO.Underlying,
          addresses.GHO,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  notional_nUSDC: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['nUSDC'],
    apyIconUrls: ['./icons/note.svg'],
    apyTokenSymbols: ['NOTE'],
    platform: ['NotionalV3'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.notional_nUSDC.Underlying,
    decimals: '8',
    vaultAddress: addresses.V2.notional_nUSDC.NewVault,
    strategyAddress: addresses.V2.notional_nUSDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [3, addresses.V2.notional_nUSDC.Underlying, addresses.USDC, CHAIN_IDS.ETH_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          3,
          addresses.NOTE,
          addresses.V2.notional_nUSDC.Underlying,
          addresses.USDC,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  notional_nUSDT: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['nUSDT'],
    apyIconUrls: ['./icons/note.svg'],
    apyTokenSymbols: ['NOTE'],
    platform: ['NotionalV3'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.notional_nUSDT.Underlying,
    decimals: '8',
    vaultAddress: addresses.V2.notional_nUSDT.NewVault,
    strategyAddress: addresses.V2.notional_nUSDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.NOTIONAL,
      params: [8, addresses.V2.notional_nUSDT.Underlying, addresses.USDT, CHAIN_IDS.ETH_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NOTIONAL,
        params: [
          8,
          addresses.NOTE,
          addresses.V2.notional_nUSDT.Underlying,
          addresses.USDT,
          profitSharingCut15Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
  },
  uniGamma_USDC_DAI: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdc.svg', './icons/dai.svg'],
    apyIconUrls: ['./icons/matic.svg'],
    apyTokenSymbols: ['WMATIC'],
    subLabel: 'Stable',
    tokenNames: ['USDC', 'DAI'],
    platform: ['Uniswap', 'Gamma'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.MATIC.V2.uniGamma_USDC_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.uniGamma_USDC_DAI.NewVault,
    strategyAddress: addresses.MATIC.V2.uniGamma_USDC_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.uniGamma_USDC_DAI.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.UNISWAP_GAMMA,
        params: [
          addresses.MATIC.V2.uniGamma_USDC_DAI.Underlying,
          addresses.MATIC.V2.uniGamma_USDC_DAI.StakingRewards,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  uniGamma_USDC_USDT: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    apyIconUrls: ['./icons/matic.svg'],
    apyTokenSymbols: ['WMATIC'],
    subLabel: 'Stable',
    tokenNames: ['USDC', 'USDT'],
    platform: ['Uniswap', 'Gamma'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.MATIC.V2.uniGamma_USDC_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.uniGamma_USDC_USDT.NewVault,
    strategyAddress: addresses.MATIC.V2.uniGamma_USDC_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.uniGamma_USDC_USDT.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.UNISWAP_GAMMA,
        params: [
          addresses.MATIC.V2.uniGamma_USDC_USDT.Underlying,
          addresses.MATIC.V2.uniGamma_USDC_USDT.StakingRewards,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  uniGamma_ETH_USDC: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/matic.svg'],
    apyTokenSymbols: ['WMATIC'],
    subLabel: 'Narrow',
    tokenNames: ['ETH', 'USDC'],
    platform: ['Uniswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.uniGamma_ETH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.uniGamma_ETH_USDC.NewVault,
    strategyAddress: addresses.MATIC.V2.uniGamma_ETH_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.uniGamma_ETH_USDC.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.UNISWAP_GAMMA,
        params: [
          addresses.MATIC.V2.uniGamma_ETH_USDC.Underlying,
          addresses.MATIC.V2.uniGamma_ETH_USDC.StakingRewards,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  uniGamma_MATIC_USDC: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/matic.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/matic.svg'],
    apyTokenSymbols: ['WMATIC'],
    subLabel: 'Narrow',
    tokenNames: ['MATIC', 'USDC'],
    platform: ['Uniswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.uniGamma_MATIC_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.uniGamma_MATIC_USDC.NewVault,
    strategyAddress: addresses.MATIC.V2.uniGamma_MATIC_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.uniGamma_MATIC_USDC.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.UNISWAP_GAMMA,
        params: [
          addresses.MATIC.V2.uniGamma_MATIC_USDC.Underlying,
          addresses.MATIC.V2.uniGamma_MATIC_USDC.StakingRewards,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
  },
  thUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.thUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['threshold-usd'],
    },
  },
  curve_thUSD_3CRV: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/thusd.svg', './icons/dai.svg', './icons/usdc.svg', './icons/usdt.svg'],
    tokenNames: ['thUSD', 'DAI', 'USDC', 'USDT'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.V2.curve_thUSD_3CRV.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_thUSD_3CRV.NewVault,
    strategyAddress: addresses.V2.curve_thUSD_3CRV.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_thUSD_3CRV.Underlying,
        addresses.V2.curve_thUSD_3CRV.Underlying,
        '18',
        ['thUSD', 'ThreePool'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['thusd_3crv', profitSharingCut15Percent],
      },
    ],
  },
  balancer_APW_ETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    logoUrl: ['./icons/apw.svg', './icons/eth.svg'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced'],
    tokenNames: ['APW', 'ETH'],
    tokenAddress: addresses.V2.balancer_APW_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.balancer_APW_ETH.NewVault,
    strategyAddress: addresses.V2.balancer_APW_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.balancer_APW_ETH.Underlying,
        addresses.V2.balancer_APW_ETH.PoolId,
        CHAIN_IDS.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['apw_eth', profitSharingCut15Percent, CHAIN_IDS.ETH_MAINNET],
      },
    ],
  },
  KLIMA_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: [''],
    tokenAddress: addresses.BASE.KLIMA,
    decimals: '9',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['klima-dao'],
    },
  },
  SPOT_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: [''],
    tokenAddress: addresses.BASE.SPOT,
    decimals: '9',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['spot'],
    },
  },
  WELS_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: [''],
    tokenAddress: addresses.BASE.WELS,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ethlas'],
    },
  },
  aerodrome_KLIMA_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/klima.png', './icons/usdc.svg'],
    tokenNames: ['KLIMA', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_KLIMA_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_KLIMA_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_KLIMA_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_KLIMA_USDC.Underlying, 'KLIMA_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_KLIMA_USDC.Underlying,
          addresses.BASE.V2.aerodrome_KLIMA_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_SPOT_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/spot.svg', './icons/usdc.svg'],
    tokenNames: ['SPOT', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_SPOT_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_SPOT_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_SPOT_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_SPOT_USDC.Underlying, 'SPOT_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_SPOT_USDC.Underlying,
          addresses.BASE.V2.aerodrome_SPOT_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_KLIMA_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/klima.png', './icons/eth.svg'],
    tokenNames: ['KLIMA', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_KLIMA_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_KLIMA_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_KLIMA_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_KLIMA_ETH.Underlying, 'KLIMA_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_KLIMA_ETH.Underlying,
          addresses.BASE.V2.aerodrome_KLIMA_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_WELS_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/wels.png', './icons/eth.svg'],
    tokenNames: ['WELS', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_WELS_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_WELS_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_WELS_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_WELS_ETH.Underlying, 'WELS_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_WELS_ETH.Underlying,
          addresses.BASE.V2.aerodrome_WELS_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  CBETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/cbeth.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.CBETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['coinbase-wrapped-staked-eth'] },
  },
  balancer_cbETH_rETH_wstETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    logoUrl: ['./icons/cbeth.svg', './icons/reth.svg', './icons/wsteth.svg'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'LSD'],
    tokenNames: ['cbETH', 'rETH', 'wstETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_cbETH_rETH_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_cbETH_rETH_wstETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_cbETH_rETH_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_cbETH_rETH_wstETH.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_cbETH_rETH_wstETH.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['cbeth_reth_wsteth_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_rETH_wETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    logoUrl: ['./icons/reth.svg', './icons/eth.svg'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'LSD'],
    tokenNames: ['rETH', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_rETH_wETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_rETH_wETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_rETH_wETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_rETH_wETH.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_rETH_wETH.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['reth_weth_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_rsETH_wETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    logoUrl: ['./icons/rseth.svg', './icons/eth.svg'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'LSD'],
    tokenNames: ['rsETH', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_rsETH_wETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_rsETH_wETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_rsETH_wETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_rsETH_wETH.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_rsETH_wETH.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['rseth_weth_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  balancer_wstETH_sfrxETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    logoUrl: ['./icons/wsteth.svg', './icons/sfrxeth.svg'],
    platform: ['Aura Finance', 'Balancer'],
    tags: ['Advanced', 'LSD'],
    tokenNames: ['wstETH', 'sfrxETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_wstETH_sfrxETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_wstETH_sfrxETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.balancer_wstETH_sfrxETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_wstETH_sfrxETH.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_wstETH_sfrxETH.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['wsteth_sfrxeth_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
  },
  aave_DAI_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_DAI.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_DAI.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_DAI.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_FRAX_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/frax.svg'],
    tokenNames: ['FRAX'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_FRAX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_FRAX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_FRAX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_FRAX.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_FRAX.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_GHO_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg', './icons/aave.svg'],
    apyTokenSymbols: ['ARB', 'AAVE'],
    logoUrl: ['./icons/gho.svg'],
    tokenNames: ['GHO'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_GHO.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_GHO.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_GHO.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gho'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_GHO.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_GHO.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_LUSD_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/lusd.svg'],
    tokenNames: ['LUSD'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_LUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_LUSD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_LUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['liquity-usd'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_LUSD.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_LUSD.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_USDC.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_USDCe_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_USDCe.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_USDCe.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  aave_USDT_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.aave_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.aave_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.aave_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.ARBITRUM_ONE.V2.aave_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.aave_USDT.AavePool,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  ETHplus_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/ethplus.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.ETHplus,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.ETHplus] },
  },
  RSR: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rsr.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.RSR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['reserve-rights-token'] },
  },
  eUSD_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eusd.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.eUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['electronic-usd'] },
  },
  KNOX: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/knox.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.KNOX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['knox-dollar'] },
  },
  USDplus_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdplus.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDplus,
    decimals: '6',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['usd'] },
  },
  USDTplus_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdtplus.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDTplus,
    decimals: '6',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['usdtplus'] },
  },
  CRV_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/curve.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.CRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['curve-dao-token'] },
  },
  curve_eUSD_crvUSD: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rsr.svg', './icons/arb.svg'],
    apyTokenSymbols: ['RSR', 'ARB'],
    logoUrl: ['./icons/eusd.svg', './icons/crvusd.svg'],
    tokenNames: ['eUSD', 'crvUSD'],
    platform: ['Curve', 'Reserve'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.Underlying,
        '18',
        ['eUSD_arbitrum', 'crvUSD_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CURVE_GAUGE,
        params: [
          'curve_eUSD_crvUSD',
          addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.Gauge,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
          addresses.ARBITRUM_ONE.V2.curve_eUSD_crvUSD.NewStrategy,
        ],
      },
    ],
  },
  curve_eUSD_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/crv.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/eusd.svg', './icons/usdc.svg'],
    tokenNames: ['eUSD', 'USDC'],
    platform: ['Convex', 'Curve', 'Reserve'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.Underlying,
        '18',
        ['eUSD_arbitrum', 'USDCoin_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_eUSD_USDC.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  curve_OVN_stable: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/ovn.svg'],
    apyTokenSymbols: ['CRV', 'OVN'],
    logoUrl: ['./icons/usdplus.svg', './icons/usdtplus.svg'],
    tokenNames: ['USD+', 'USDT+'],
    platform: ['Convex Finance', 'Curve', 'Overnight'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_OVN_stable.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_OVN_stable.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_OVN_stable.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_OVN_stable.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_OVN_stable.Underlying,
        '18',
        ['USDplus_arbitrum', 'USDTplus_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_OVN_stable.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_OVN_stable.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  curve_OVN: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/ovn.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'OVN', 'ARB'],
    logoUrl: ['./icons/usdplus.svg', './icons/frax.svg', './icons/usdc.svg'],
    tokenNames: ['USD+', 'FRAX', 'USDC.e'],
    platform: ['Convex Finance', 'Curve', 'Overnight'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_OVN.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_OVN.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_OVN.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_OVN.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_OVN.Underlying,
        '18',
        ['USDplus_arbitrum', 'curve_FRAX_USDCe'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_OVN.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_OVN.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  curve_TriCRV_ARB: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/crvusd.svg', './icons/arb.svg', './icons/curve.svg'],
    tokenNames: ['crvUSD', 'ARB', 'CRV'],
    platform: ['Curve'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.Underlying,
        '18',
        ['crvUSD_arbitrum', 'ARB', 'CRV_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CURVE_GAUGE,
        params: [
          'curve_TriCRV_ARB',
          addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.Gauge,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
          addresses.ARBITRUM_ONE.V2.curve_TriCRV_ARB.NewStrategy,
        ],
      },
    ],
  },
  curve_TriRSR: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rsr.svg', './icons/arb.svg'],
    apyTokenSymbols: ['RSR', 'ARB'],
    logoUrl: ['./icons/ethplus.svg', './icons/eusd.svg', './icons/rsr.svg'],
    tokenNames: ['ETH+', 'eUSD', 'RSR'],
    platform: ['Curve', 'Reserve'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_TriRSR.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_TriRSR.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_TriRSR.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_TriRSR.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_TriRSR.Underlying,
        '18',
        ['ETHplus_arbitrum', 'eUSD_arbitrum', 'RSR'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CURVE_GAUGE,
        params: [
          'curve_TriRSR',
          addresses.ARBITRUM_ONE.V2.curve_TriRSR.Gauge,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
          addresses.ARBITRUM_ONE.V2.curve_TriRSR.NewStrategy,
        ],
      },
    ],
  },
  curve_WBTC_tBTC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/crv.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/wbtc.svg', './icons/tbtc.svg'],
    tokenNames: ['WBTC', 'tBTC'],
    platform: ['Convex', 'Curve'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.Underlying,
        '18',
        ['WBTC_arbitrum', 'tBTC_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_WBTC_tBTC.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
  },
  hop_DAI: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI-LP'],
    platform: ['Hop'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.hop_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.hop_DAI.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.hop_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.HOP_LP,
      params: [addresses.ARBITRUM_ONE.V2.hop_DAI.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.HOP,
        params: [
          addresses.ARBITRUM_ONE.V2.hop_DAI.RewardPool,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  hop_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH-LP'],
    platform: ['Hop'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.hop_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.hop_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.hop_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.HOP_LP,
      params: [addresses.ARBITRUM_ONE.V2.hop_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.HOP,
        params: [
          addresses.ARBITRUM_ONE.V2.hop_ETH.RewardPool,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  hop_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/arb.svg'],
    apyTokenSymbols: ['ARB'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT-LP'],
    platform: ['Hop'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.hop_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.hop_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.hop_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.HOP_LP,
      params: [addresses.ARBITRUM_ONE.V2.hop_USDT.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.HOP,
        params: [
          addresses.ARBITRUM_ONE.V2.hop_USDT.RewardPool,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  reactor_ETH: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['ReactorFusion'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.reactor_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.reactor_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.reactor_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.REACTORFUSION_FOLD,
        params: [
          addresses.ZKSYNC.V2.reactor_ETH.Underlying,
          addresses.ZKSYNC.V2.reactor_ETH.cToken,
          addresses.ZKSYNC.V2.reactor_ETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  reactor_USDCe: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['ReactorFusion'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.reactor_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.reactor_USDCe.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.reactor_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.REACTORFUSION_FOLD,
        params: [
          addresses.ZKSYNC.V2.reactor_USDCe.Underlying,
          addresses.ZKSYNC.V2.reactor_USDCe.cToken,
          addresses.ZKSYNC.V2.reactor_USDCe.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  reactor_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['ReactorFusion'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.reactor_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ZKSYNC.V2.reactor_USDT.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.reactor_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.REACTORFUSION_FOLD,
        params: [
          addresses.ZKSYNC.V2.reactor_USDT.Underlying,
          addresses.ZKSYNC.V2.reactor_USDT.cToken,
          addresses.ZKSYNC.V2.reactor_USDT.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  reactor_WBTC: {
    chain: CHAIN_IDS.ZKSYNC,
    apyIconUrls: ['./icons/zk.svg'],
    apyTokenSymbols: ['ZK'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['ReactorFusion'],
    tags: ['Beginners'],
    tokenAddress: addresses.ZKSYNC.V2.reactor_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ZKSYNC.V2.reactor_WBTC.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.reactor_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.REACTORFUSION_FOLD,
        params: [
          addresses.ZKSYNC.V2.reactor_WBTC.Underlying,
          addresses.ZKSYNC.V2.reactor_WBTC.cToken,
          addresses.ZKSYNC.V2.reactor_WBTC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_ZK_ETH: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/zk.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/zf.svg', './icons/zk.svg'],
    apyTokenSymbols: ['ZF', 'ZK'],
    tokenNames: ['ZK', 'ETH'],
    platform: ['zkSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_ZK_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_ZK_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_ZK_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_ZK_ETH.Underlying, 'ZK', 'WETH_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_ZK_ETH.Underlying,
          addresses.ZKSYNC.V2.zkswap_ZK_ETH.NewStrategy,
          30,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_ETH_USDCe: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/zf.svg', './icons/zk.svg'],
    apyTokenSymbols: ['ZF', 'ZK'],
    tokenNames: ['ETH', 'USDC.e'],
    platform: ['zkSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_ETH_USDCe.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_ETH_USDCe.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_ETH_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_ETH_USDCe.Underlying, 'WETH_zksync', 'USDCe_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_ETH_USDCe.Underlying,
          addresses.ZKSYNC.V2.zkswap_ETH_USDCe.NewStrategy,
          2,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_LONG_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/long.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/zf.svg'],
    apyTokenSymbols: ['ZF'],
    tokenNames: ['LONG', 'ETH'],
    platform: ['zkSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_LONG_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_LONG_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_LONG_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_LONG_ETH.Underlying, 'LONG', 'WETH_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_LONG_ETH.Underlying,
          addresses.ZKSYNC.V2.zkswap_LONG_ETH.NewStrategy,
          21,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_USDCe_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    apyIconUrls: ['./icons/zf.svg'],
    apyTokenSymbols: ['ZF'],
    tokenNames: ['USDC.e', 'USDT'],
    platform: ['zkSwap'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_USDCe_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_USDCe_USDT.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_USDCe_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_USDCe_USDT.Underlying, 'USDCe_zksync', 'USDT_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_USDCe_USDT.Underlying,
          addresses.ZKSYNC.V2.zkswap_USDCe_USDT.NewStrategy,
          3,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_WBTC_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/wbtc.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/zf.svg'],
    apyTokenSymbols: ['ZF'],
    tokenNames: ['WBTC', 'ETH'],
    platform: ['zkSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_WBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_WBTC_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_WBTC_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_WBTC_ETH.Underlying, 'WBTC_zksync', 'WETH_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_WBTC_ETH.Underlying,
          addresses.ZKSYNC.V2.zkswap_WBTC_ETH.NewStrategy,
          4,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_wstETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/steth.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/zf.svg', './icons/zk.svg'],
    apyTokenSymbols: ['ZF', 'ZK'],
    tokenNames: ['stETH', 'ETH'],
    platform: ['zkSwap'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_wstETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_wstETH_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_wstETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_wstETH_ETH.Underlying, 'wstETH_zksync', 'WETH_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_wstETH_ETH.Underlying,
          addresses.ZKSYNC.V2.zkswap_wstETH_ETH.NewStrategy,
          19,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  zkswap_ZF_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/zf.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/zf.svg'],
    apyTokenSymbols: ['ZF'],
    tokenNames: ['ZF', 'ETH'],
    platform: ['zkSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.ZKSYNC.V2.zkswap_ZF_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ZKSYNC.V2.zkswap_ZF_ETH.NewVault,
    strategyAddress: addresses.ZKSYNC.V2.zkswap_ZF_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ZKSYNC.V2.zkswap_ZF_ETH.Underlying, 'ZF', 'WETH_zksync'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.ZKSWAP,
        params: [
          addresses.ZKSYNC.V2.zkswap_ZF_ETH.Underlying,
          addresses.ZKSYNC.V2.zkswap_ZF_ETH.NewStrategy,
          1,
          profitSharingCut10Percent,
        ],
      },
    ],
  },
  RF: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/rf.svg'],
    tokenAddress: addresses.ZKSYNC.RF,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['reactorfusion'],
    },
  },
  ZF: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/zf.svg'],
    tokenAddress: addresses.ZKSYNC.ZF,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zkswap-finance'],
    },
  },
  ZK: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/zk.svg'],
    tokenAddress: addresses.ZKSYNC.ZK,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['zksync'],
    },
  },
  LONG: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/long.svg'],
    tokenAddress: addresses.ZKSYNC.LONG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['long-3'],
    },
  },
  wrsETH_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/wrseth.svg'],
    tokenAddress: addresses.ZKSYNC.wrsETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['wrapped-rseth'] },
  },
  WETH_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/eth.svg'],
    tokenAddress: addresses.ZKSYNC.WETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
  },
  USDCe_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdc.svg'],
    tokenAddress: addresses.ZKSYNC.USDCe,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  USDC_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdc.svg'],
    tokenAddress: addresses.ZKSYNC.USDC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  USDT_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/usdt.svg'],
    tokenAddress: addresses.ZKSYNC.USDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
  },
  WBTC_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/wbtc.svg'],
    tokenAddress: addresses.ZKSYNC.WBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
  },
  wstETH_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/wsteth.svg'],
    tokenAddress: addresses.ZKSYNC.wstETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
  },
  iFARM_zksync: {
    chain: CHAIN_IDS.ZKSYNC,
    logoUrl: ['./icons/ifarm.svg'],
    tokenAddress: addresses.ZKSYNC.iFARM,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ifarm'],
    },
  },
  penpie_rsETH2706: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/rsethlp.svg'],
    tokenNames: ['rsETH-LP (27-JUN-24)'],
    platform: ['Penpie'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_rsETH2706.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_rsETH2706.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_rsETH2706.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_rsETH2706.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_rsETH2706.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  penpie_eETH2706: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/eethlp.svg'],
    tokenNames: ['eETH-LP (27-JUN-24)'],
    platform: ['Penpie'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_eETH2706.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_eETH2706.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_eETH2706.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_eETH2706.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_eETH2706.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  penpie_ezETH2706: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/ezethlp.svg'],
    tokenNames: ['ezETH-LP (27-JUN-24)'],
    platform: ['Penpie'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_ezETH2706.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_ezETH2706.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_ezETH2706.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_ezETH2706.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_ezETH2706.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  penpie_wstETH2706: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/wstethlp.svg'],
    tokenNames: ['wstETH-LP (27-JUN-24)'],
    platform: ['Penpie'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_wstETH2706.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_wstETH2706.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_wstETH2706.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_wstETH2706.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_wstETH2706.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  IFARM_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/ifarm.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['iFARM'],
    platform: ['Harvest'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.iFARM.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.iFARM.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.iFARM.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.iFARM, '18'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
  },
  GENOME: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/genome.svg'],
    tokenAddress: addresses.BASE.GENOME,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.AERODROME_PAIR,
      params: [addresses.BASE.GENOME, addresses.BASE.WETH, 6],
    },
  },
  aerodrome_GENOME_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/genome.svg', './icons/eth.svg'],
    tokenNames: ['GENOME', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'DeSci'],
    tokenAddress: addresses.BASE.V2.aerodrome_GENOME_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_GENOME_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.aerodrome_GENOME_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_GENOME_ETH.Underlying, 'GENOME', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_GENOME_ETH.Underlying,
          addresses.BASE.V2.aerodrome_GENOME_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  penpie_gDAI2609: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/gdai.svg'],
    tokenNames: ['gDAI-LP (26-SEP-24)'],
    platform: ['Penpie'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_gDAI2609.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_gDAI2609.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_gDAI2609.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_gDAI2609.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_gDAI2609.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  penpie_aUSDC2706: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/ausdc.svg'],
    tokenNames: ['aUSDC-LP (27-JUN-24)'],
    platform: ['Penpie'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_aUSDC2706.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_aUSDC2706.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_aUSDC2706.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_aUSDC2706.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_aUSDC2706.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  penpie_mPENDLE2609: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg'],
    apyTokenSymbols: ['PENDLE'],
    logoUrl: ['./icons/mpendle.png'],
    tokenNames: ['mPENDLE-LP (26-SEP-24)'],
    platform: ['Penpie'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_mPENDLE2609.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_mPENDLE2609.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_mPENDLE2609.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_mPENDLE2609.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_mPENDLE2609.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  GB_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/gb.svg'],
    tokenAddress: addresses.BASE.GB,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['grand-base'],
    },
  },
  OVN_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/ovn.svg'],
    tokenAddress: addresses.BASE.OVN,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['overnight-finance'],
    },
  },
  STAR_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/star.svg'],
    tokenAddress: addresses.BASE.STAR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['preon-star'],
    },
  },
  aerodrome_GB_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/gb.svg', './icons/eth.svg'],
    tokenNames: ['GB', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_GB_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_GB_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_GB_ETH.Underlying, 'GB_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_GB_ETH.Underlying,
          addresses.BASE.V2.aerodrome_GB_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_OVN_USDp: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/ovn.svg', './icons/usdplus.svg'],
    tokenNames: ['OVN', 'USD+'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_OVN_USDp.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_OVN_USDp.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_OVN_USDp.Underlying, 'OVN_base', 'USDplus_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_OVN_USDp.Underlying,
          addresses.BASE.V2.aerodrome_OVN_USDp.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_USDC_AERO: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/aero.svg', './icons/usdc.svg'],
    tokenNames: ['AERO', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_USDC_AERO.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_USDC_AERO.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_USDC_AERO.Underlying, 'AERO', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_USDC_AERO.Underlying,
          addresses.BASE.V2.aerodrome_USDC_AERO.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_WELL_ETH_old: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/well.svg', './icons/eth.svg'],
    tokenNames: ['WELL(old)', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_WELL_ETH_old.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_WELL_ETH_old.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_WELL_ETH_old.Underlying, 'WELL_old', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_WELL_ETH_old.Underlying,
          addresses.BASE.V2.aerodrome_WELL_ETH_old.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_STAR_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/star.svg', './icons/usdc.svg'],
    tokenNames: ['STAR', 'USDC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_STAR_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_STAR_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_STAR_USDC.Underlying, 'STAR_base', 'USDC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_STAR_USDC.Underlying,
          addresses.BASE.V2.aerodrome_STAR_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_USDC_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/usdc.svg', './icons/usdbc.svg'],
    tokenNames: ['USDC', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_USDC_USDbC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_USDC_USDbC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_USDC_USDbC.Underlying, 'USDC_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_USDC_USDbC.Underlying,
          addresses.BASE.V2.aerodrome_USDC_USDbC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_SEAM_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/seam.svg', './icons/usdbc.svg'],
    tokenNames: ['SEAM', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_SEAM_USDbC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_SEAM_USDbC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_SEAM_USDbC.Underlying, 'SEAM', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_SEAM_USDbC.Underlying,
          addresses.BASE.V2.aerodrome_SEAM_USDbC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  gammaMerkl_QS_tBTC_ETH: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/tbtc.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Narrow',
    tokenNames: ['tBTC', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.gammaMerkl_QS_tBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.gammaMerkl_QS_tBTC_ETH.NewVault,
    strategyAddress: addresses.MATIC.V2.gammaMerkl_QS_tBTC_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.gammaMerkl_QS_tBTC_ETH.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  gammaMerkl_QS_WBTC_ETH_w: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/wbtc.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Wide',
    tokenNames: ['WBTC', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.gammaMerkl_QS_WBTC_ETH_w.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.gammaMerkl_QS_WBTC_ETH_w.NewVault,
    strategyAddress: addresses.MATIC.V2.gammaMerkl_QS_WBTC_ETH_w.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.gammaMerkl_QS_WBTC_ETH_w.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.gammaMerkl_QS_WBTC_ETH_w.NewStrategy,
          addresses.MATIC.V2.gammaMerkl_QS_WBTC_ETH_w.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  crvUSD_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/crvusd.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.crvUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['crvusd'],
    },
  },
  USDCoin_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/crvusd.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDCoin,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  fETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/feth.png'],
    tokenAddress: addresses.ARBITRUM_ONE.fETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['f-x-protocol-fractional-eth'],
    },
  },
  xETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/xeth.png'],
    tokenAddress: addresses.ARBITRUM_ONE.xETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['f-x-protocol-leveraged-eth'],
    },
  },
  frxETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/frxeth.png'],
    tokenAddress: addresses.ARBITRUM_ONE.frxETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax-ether'],
    },
  },
  curve_crvUSD_FRAX: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'ARB'],
    logoUrl: ['./icons/crvusd.svg', './icons/frax.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['crvUSD', 'FRAX'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.Underlying,
        '18',
        ['FRAX_arbitrum', 'crvUSD_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_FRAX.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV', 'ARB'],
  },
  curve_crvUSD_USDC_arbitrum: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'ARB'],
    logoUrl: ['./icons/crvusd.svg', './icons/usdc.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['crvUSD', 'USDC'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.Underlying,
        '18',
        ['crvUSD_arbitrum', 'USDCoin_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDC_arbitrum.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV', 'ARB'],
  },
  curve_crvUSD_USDCe: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'ARB'],
    logoUrl: ['./icons/crvusd.svg', './icons/usdc.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['crvUSD', 'USDC.e'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.Underlying,
        '18',
        ['crvUSD_arbitrum', 'USDC_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDCe.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV', 'ARB'],
  },
  curve_crvUSD_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'ARB'],
    logoUrl: ['./icons/crvusd.svg', './icons/usdt.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['crvUSD', 'USDT'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.Underlying,
        '18',
        ['crvUSD_arbitrum', 'USDT_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_USDT.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV', 'ARB'],
  },
  curve_crvUSD_WBTC_WETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'ARB'],
    logoUrl: ['./icons/crvusd.svg', './icons/wbtc.svg', './icons/eth.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenNames: ['crvUSD', 'WBTC', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.Underlying,
        '18',
        ['crvUSD_arbitrum', 'WBTC_arbitrum', 'ETH'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_crvUSD_WBTC_WETH.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV', 'ARB'],
  },
  curve_FRAX_USDCe: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg'],
    apyTokenSymbols: ['CRV'],
    logoUrl: ['./icons/frax.svg', './icons/usdc.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['FRAX', 'USDC.e'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.Underlying,
        '18',
        ['FRAX_arbitrum', 'USDC_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_FRAX_USDCe.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  USDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdc.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  curve_USDCe_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/curve.svg', './icons/arb.svg'],
    apyTokenSymbols: ['CRV', 'ARB'],
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['USDC.e', 'USDT'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.Underlying,
        addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.Underlying,
        '18',
        ['USDC_arbitrum', 'USDT_arbitrum'],
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX_L2,
        params: [
          addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.curve_USDCe_USDT.PoolId,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV', 'ARB'],
  },
  penpie_eETH2504: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/pendle.svg', './icons/arb.svg'],
    apyTokenSymbols: ['PENDLE', 'ARB'],
    logoUrl: ['./icons/eethlp.svg'],
    tokenNames: ['eETH-LP (25-APR-24)'],
    platform: ['Penpie'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.penpie_eETH2504.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.penpie_eETH2504.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.penpie_eETH2504.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.PENDLE_MARKET,
      params: [addresses.ARBITRUM_ONE.V2.penpie_eETH2504.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PENPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.penpie_eETH2504.Underlying,
          CHAIN_IDS.ARBITRUM_ONE,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'PENLDE'],
  },
  aave_EURS: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/eurs.svg'],
    tokenNames: ['EURS'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.MATIC.V2.aave_EURS.Underlying,
    decimals: '2',
    vaultAddress: addresses.MATIC.V2.aave_EURS.NewVault,
    strategyAddress: addresses.MATIC.V2.aave_EURS.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['stasis-eurs'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.MATIC.V2.aave_EURS.Underlying,
          addresses.MATIC.V2.aave_EURS.AavePool,
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM'],
  },
  aave_USDC_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.MATIC.V2.aave_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.aave_USDC.NewVault,
    strategyAddress: addresses.MATIC.V2.aave_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.MATIC.V2.aave_USDC.Underlying,
          addresses.MATIC.V2.aave_USDC.AavePool,
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM'],
  },
  aave_USDCe: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDCe'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.MATIC.V2.aave_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.aave_USDCe.NewVault,
    strategyAddress: addresses.MATIC.V2.aave_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.MATIC.V2.aave_USDCe.Underlying,
          addresses.MATIC.V2.aave_USDCe.AavePool,
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM'],
  },
  aave_USDT: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    apyIconUrls: ['./icons/aave.svg'],
    apyTokenSymbols: ['AAVE'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Aave'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.MATIC.V2.aave_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.aave_USDT.NewVault,
    strategyAddress: addresses.MATIC.V2.aave_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AAVE_SUPPLY,
        params: [
          addresses.MATIC.V2.aave_USDT.Underlying,
          addresses.MATIC.V2.aave_USDT.AavePool,
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM'],
  },
  rsETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rseth.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.rsETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['kelp-dao-restaked-eth'],
    },
  },
  camelotV3_rsETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rseth.svg', './icons/eth.svg'],
    tokenNames: ['rsETH', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Pegged',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_rsETH_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  gammaMerkl_QS_ETH_USDC: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Narrow',
    tokenNames: ['ETH', 'USDC'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.gammaMerkl_QS_ETH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.gammaMerkl_QS_ETH_USDC.NewVault,
    strategyAddress: addresses.MATIC.V2.gammaMerkl_QS_ETH_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.gammaMerkl_QS_ETH_USDC.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.gammaMerkl_QS_ETH_USDC.NewStrategy,
          addresses.MATIC.V2.gammaMerkl_QS_ETH_USDC.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  gammaMerkl_QS_ETH_USDT: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/eth.svg', './icons/usdt.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Narrow',
    tokenNames: ['ETH', 'USDT'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.gammaMerkl_QS_ETH_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.gammaMerkl_QS_ETH_USDT.NewVault,
    strategyAddress: addresses.MATIC.V2.gammaMerkl_QS_ETH_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.gammaMerkl_QS_ETH_USDT.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.gammaMerkl_QS_ETH_USDT.NewStrategy,
          addresses.MATIC.V2.gammaMerkl_QS_ETH_USDT.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  gammaMerkl_QS_MATIC_USDT: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/matic.svg', './icons/usdt.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Narrow',
    tokenNames: ['MATIC', 'USDT'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.gammaMerkl_QS_MATIC_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.gammaMerkl_QS_MATIC_USDT.NewVault,
    strategyAddress: addresses.MATIC.V2.gammaMerkl_QS_MATIC_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.gammaMerkl_QS_MATIC_USDT.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.gammaMerkl_QS_MATIC_USDT.NewStrategy,
          addresses.MATIC.V2.gammaMerkl_QS_MATIC_USDT.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  lodestarHodl_MAGIC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/magic.svg'],
    tokenNames: ['MAGIC'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['magic'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_MAGIC.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_PENDLE: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/pendle.svg'],
    tokenNames: ['PENDLE'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['pendle'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_PENDLE.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_MAGIC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/magic.svg'],
    tokenNames: ['MAGIC'],
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_MAGIC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_MAGIC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_MAGIC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['magic'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_MAGIC.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_MAGIC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_MAGIC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_PENDLE: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/pendle.svg'],
    tokenNames: ['PENDLE'],
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_PENDLE.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_PENDLE.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_PENDLE.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['pendle'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_PENDLE.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_PENDLE.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_PENDLE.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  camelotV3_MAGIC_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/magic.svg', './icons/eth.svg'],
    tokenNames: ['MAGIC', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_MAGIC_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_PENDLE_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/pendle.svg', './icons/eth.svg'],
    tokenNames: ['PENDLE', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_PENDLE_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_RDNT_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rdnt.svg', './icons/eth.svg'],
    tokenNames: ['RDNT', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_RDNT_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_USDC_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    tokenNames: ['USDC', 'USDT'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    subLabel: 'Stable',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_USDC_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_USDC_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.camelotV3_USDC_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_USDC_USDT.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_USDC_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_USDC_USDT.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_wstETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/steth.svg', './icons/eth.svg'],
    tokenNames: ['stETH', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Pegged',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_wstETH_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  seamless_wstETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg'],
    apyTokenSymbols: ['esSEAM'],
    logoUrl: ['./icons/steth.svg'],
    tokenNames: ['wstETH'],
    platform: ['Seamless'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.BASE.V2.seamless_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.seamless_wstETH.NewVault,
    strategyAddress: addresses.BASE.V2.seamless_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SEAMLESS_FOLD,
        params: [
          addresses.BASE.V2.seamless_wstETH.Underlying,
          addresses.BASE.V2.seamless_wstETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'esSEAM'],
  },
  RDP: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rdp.png'],
    tokenAddress: addresses.ARBITRUM_ONE.RDP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['radpie'],
    },
  },
  plvGLP: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.plvGLP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.MANUAL,
      params: ['1.5'],
    },
  },
  radpie_ARB: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg'],
    apyTokenSymbols: ['RDNT'],
    logoUrl: ['./icons/arb.svg'],
    tokenNames: ['rARB'],
    platform: ['Radpie'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_ARB.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_ARB.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_ARB.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_ARB.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_ARB.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT'],
  },
  radpie_DAI: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg'],
    apyTokenSymbols: ['RDNT'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['rDAI'],
    platform: ['Radpie'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_DAI.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_DAI.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_DAI.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT'],
  },
  radpie_WETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg'],
    apyTokenSymbols: ['RDNT'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['rETH'],
    platform: ['Radpie'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_WETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_WETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_WETH.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_WETH.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT'],
  },
  radpie_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg', './icons/arb.svg'],
    apyTokenSymbols: ['RDNT', 'ARB'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['rUSDC'],
    platform: ['Radpie'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_USDC.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_USDC.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT', 'ARB'],
  },
  radpie_USDCe: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg', './icons/arb.svg'],
    apyTokenSymbols: ['RDNT', 'ARB'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['rUSDC.e'],
    platform: ['Radpie'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_USDCe.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_USDCe.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT', 'ARB'],
  },
  radpie_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg', './icons/arb.svg'],
    apyTokenSymbols: ['RDNT', 'ARB'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['rUSDT'],
    platform: ['Radpie'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_USDT.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDT] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_USDT.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_USDT.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT', 'ARB'],
  },
  radpie_WBTC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg', './icons/rdp.png', './icons/arb.svg'],
    apyTokenSymbols: ['RDNT', 'RDP', 'ARB'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['rWBTC'],
    platform: ['Radpie'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_WBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_WBTC.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_WBTC.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT'],
  },
  radpie_wstETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/rdnt.svg'],
    apyTokenSymbols: ['RDNT'],
    logoUrl: ['./icons/steth.svg'],
    tokenNames: ['rwstETH'],
    platform: ['Radpie'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.radpie_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.radpie_wstETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.radpie_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.RADPIE,
        params: [
          addresses.ARBITRUM_ONE.V2.radpie_wstETH.PoolId,
          addresses.ARBITRUM_ONE.V2.radpie_wstETH.Rewarder,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'RDNT'],
  },
  SEAM: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/seam.svg'],
    tokenAddress: addresses.BASE.SEAM,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['seamless-protocol'],
    },
  },
  esSEAM: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/seam.svg'],
    tokenAddress: addresses.BASE.esSEAM,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['seamless-protocol'],
    },
  },
  seamless_cbETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg'],
    apyTokenSymbols: ['esSEAM'],
    logoUrl: ['./icons/cbeth.svg'],
    tokenNames: ['cbETH'],
    platform: ['Seamless'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.BASE.V2.seamless_cbETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.seamless_cbETH.NewVault,
    strategyAddress: addresses.BASE.V2.seamless_cbETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-staked-eth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SEAMLESS_FOLD,
        params: [
          addresses.BASE.V2.seamless_cbETH.Underlying,
          addresses.BASE.V2.seamless_cbETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'esSEAM'],
  },
  seamless_DAI: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg'],
    apyTokenSymbols: ['esSEAM'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Seamless'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.seamless_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.seamless_DAI.NewVault,
    strategyAddress: addresses.BASE.V2.seamless_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SEAMLESS_FOLD,
        params: [
          addresses.BASE.V2.seamless_DAI.Underlying,
          addresses.BASE.V2.seamless_DAI.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'esSEAM'],
  },
  seamless_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg'],
    apyTokenSymbols: ['esSEAM'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Seamless'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.seamless_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.seamless_ETH.NewVault,
    strategyAddress: addresses.BASE.V2.seamless_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SEAMLESS_FOLD,
        params: [
          addresses.BASE.V2.seamless_ETH.Underlying,
          addresses.BASE.V2.seamless_ETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'esSEAM'],
  },
  seamless_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg'],
    apyTokenSymbols: ['esSEAM'],
    logoUrl: ['./icons/usdbc.svg'],
    tokenNames: ['USDbC'],
    platform: ['Seamless'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.seamless_USDbC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.seamless_USDbC.NewVault,
    strategyAddress: addresses.BASE.V2.seamless_USDbC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SEAMLESS_FOLD,
        params: [
          addresses.BASE.V2.seamless_USDbC.Underlying,
          addresses.BASE.V2.seamless_USDbC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'esSEAM'],
  },
  seamless_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/seam.svg'],
    apyTokenSymbols: ['esSEAM'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Seamless'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.seamless_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.seamless_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.seamless_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SEAMLESS_FOLD,
        params: [
          addresses.BASE.V2.seamless_USDC.Underlying,
          addresses.BASE.V2.seamless_USDC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'esSEAM'],
  },
  lodestarHodl_ARB: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/arb.svg'],
    tokenNames: ['ARB'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ARB.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_DAI: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_DAI.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_ETH.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_FRAX: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/frax.svg'],
    tokenNames: ['FRAX'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_FRAX.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_GMX: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/gmx.svg'],
    tokenNames: ['GMX'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gmx'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_GMX.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_USDCe: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDCe'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDCe.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDT.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_WBTC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_WBTC.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestarHodl_wstETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/steth.svg'],
    tokenNames: ['wstETH'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_wstETH.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  fLODE: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_LODE.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.lodestar_LODE.NewVault, '18', CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  lodestarHodl_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg', './icons/lode.svg'],
    apyTokenSymbols: ['INTEREST', 'LODE'],
    apyDescriptionOverride: [
      'Auto compounding Interest',
      'Auto harvested <u>LODE</u> claimable as <u>fLODE</u>',
    ],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    subLabel: 'HODL',
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_COMPOUNDING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.NewStrategy,
        ],
      },
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD_HODL_HODLING,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestarHodl_USDC.NewStrategy,
          'lodestar_LODE',
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_LODE: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['WETH'],
    logoUrl: ['./icons/lode.svg'],
    tokenNames: ['LODE'],
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_LODE.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_LODE.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_LODE.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lodestar'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_STAKE,
        params: [profitSharingCut10Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WETH'],
  },
  lodestar_ARB: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/xvs.svg'],
    apyTokenSymbols: ['XVS'],
    logoUrl: ['./icons/arb.svg'],
    tokenNames: ['ARB'],
    platform: ['Venus'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_ARB.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_ARB.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_ARB.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.VENUS_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_ARB.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_ARB.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_ARB.NewStrategy,
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_FRAX: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/frax.svg'],
    tokenNames: ['FRAX'],
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_FRAX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_FRAX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_FRAX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_FRAX.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_FRAX.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_FRAX.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_GMX: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/gmx.svg'],
    tokenNames: ['GMX'],
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_GMX.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_GMX.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_GMX.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gmx'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_GMX.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_GMX.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_GMX.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_wstETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/steth.svg'],
    tokenNames: ['wstETH'],
    platform: ['Lodestar'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_wstETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_wstETH.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_wstETH.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_wstETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  MGP: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/mgp.png'],
    tokenAddress: addresses.ARBITRUM_ONE.MGP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['magpie'],
    },
  },
  WOM: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/wom.png'],
    tokenAddress: addresses.ARBITRUM_ONE.WOM,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wombat-exchange'],
    },
  },
  magpie_ETH_frxeth: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eth.svg'],
    apyIconUrls: ['./icons/mgp.png', './icons/wom.png'],
    apyTokenSymbols: ['MGP', 'WOM'],
    platform: ['Magpie'],
    tags: ['Advanced'],
    tokenNames: ['ETH-LP'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.magpie_ETH_frxeth.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.magpie_ETH_frxeth.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.magpie_ETH_frxeth.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MAGPIE,
        params: [addresses.ARBITRUM_ONE.V2.magpie_ETH_frxeth.Underlying, profitSharingCut10Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'MGP', 'WOM'],
  },
  moonwell_wstETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/wsteth.svg'],
    tokenNames: ['wstETH'],
    platform: ['Moonwell'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.BASE.V2.moonwell_wstETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_wstETH.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_wstETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_wstETH.Underlying,
          addresses.BASE.V2.moonwell_wstETH.mToken,
          addresses.BASE.V2.moonwell_wstETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WELL'],
  },
  moonwell_rETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/reth.svg'],
    tokenNames: ['rETH'],
    platform: ['Moonwell'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.BASE.V2.moonwell_rETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_rETH.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_rETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['rocket-pool-eth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_rETH.Underlying,
          addresses.BASE.V2.moonwell_rETH.mToken,
          addresses.BASE.V2.moonwell_rETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WELL'],
  },
  lodestar_ETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_ETH.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_ETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ethereum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_ETH.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_ETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_DAI: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_DAI.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_DAI.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_DAI.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_DAI.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_USDC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_USDC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_USDC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_USDCe: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDCe'],
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDCe.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDCe.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDCe.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_USDCe.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_USDCe.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_USDCe.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_USDT: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Lodestar'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDT.Underlying,
    decimals: '6',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDT.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_USDT.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_USDT.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  lodestar_WBTC: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/lode.svg'],
    apyTokenSymbols: ['LODE'],
    logoUrl: ['./icons/wbtc.svg'],
    tokenNames: ['WBTC'],
    platform: ['Lodestar'],
    tags: ['Beginners'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.lodestar_WBTC.Underlying,
    decimals: '8',
    vaultAddress: addresses.ARBITRUM_ONE.V2.lodestar_WBTC.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.lodestar_WBTC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-bitcoin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LODESTAR_FOLD,
        params: [
          addresses.ARBITRUM_ONE.V2.lodestar_WBTC.Underlying,
          addresses.ARBITRUM_ONE.V2.lodestar_WBTC.cToken,
          addresses.ARBITRUM_ONE.V2.lodestar_WBTC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LODE', 'ARB'],
  },
  camelotV3_ARB_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/arb.svg', './icons/eth.svg'],
    tokenNames: ['ARB', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ARB_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ARB_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_ARB_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_ARB_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_ARB_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_ARB_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_DAI_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/dai.svg', './icons/usdc.svg'],
    tokenNames: ['DAI', 'USDC'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Stable',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_DAI_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_DAI_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_DAI_USDC.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_DAI_USDC.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_DAI_USDC.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_DAI_USDC.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_GMX_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/gmx.svg', './icons/eth.svg'],
    tokenNames: ['GMX', 'ETH'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_GMX_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_GMX_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_GMX_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_GMX_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_GMX_ETH.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_GRAIL_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/grail.svg', './icons/eth.svg'],
    tokenNames: ['GRAIL', 'ETH'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_GRAIL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_GRAIL_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_GRAIL_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_GRAIL_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_GRAIL_ETH.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_LINK_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/link.svg', './icons/eth.svg'],
    tokenNames: ['LINK', 'ETH'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_LINK_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_LINK_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_LINK_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_LINK_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelotV3_LINK_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelotV3_LINK_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_WBTC_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/wbtc.svg', './icons/eth.svg'],
    tokenNames: ['WBTC', 'ETH'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_WBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_WBTC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_WBTC_ETH.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_WBTC_ETH.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_WBTC_ETH.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelotV3_ARB_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/arb.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    tokenNames: ['ARB', 'USDC'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ARB_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ARB_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_ARB_USDC.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_ARB_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_ARB_USDC.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL'],
  },
  camelotV3_ETH_USDT: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eth.svg', './icons/usdt.svg'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    tokenNames: ['ETH', 'USDT'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDT.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDT.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDT.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDT.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL'],
  },
  camelotV3_ETH_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/xgrail.svg'],
    apyTokenSymbols: ['xGRAIL'],
    tokenNames: ['ETH', 'USDC'],
    subLabel: 'Narrow',
    platform: ['Camelot V3', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDC.Underlying, CHAIN_IDS.ARBITRUM_ONE],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_MERKL,
        params: [
          addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.camelotV3_ETH_USDC.AlgebraPool,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL'],
  },
  quickGamma_wstETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/steth.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Pegged Price',
    tokenNames: ['stETH', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.MATIC.V2.quickGamma_wstETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_wstETH_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.quickGamma_wstETH_ETH.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.quickGamma_wstETH_ETH.NewStrategy,
          addresses.MATIC.V2.quickGamma_wstETH_ETH.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  quickGamma_WBTC_USDC_narrow: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/wbtc.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Narrow',
    tokenNames: ['WBTC', 'USDC.e'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.quickGamma_WBTC_USDC_narrow.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_WBTC_USDC_narrow.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [
        addresses.MATIC.V2.quickGamma_WBTC_USDC_narrow.Underlying,
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.quickGamma_WBTC_USDC_narrow.NewStrategy,
          addresses.MATIC.V2.quickGamma_WBTC_USDC_narrow.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  quickGamma_WBTC_ETH_narrow: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/wbtc.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg'],
    apyTokenSymbols: ['dQUICK'],
    subLabel: 'Narrow',
    tokenNames: ['WBTC', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.quickGamma_WBTC_ETH_narrow.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_WBTC_ETH_narrow.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.quickGamma_WBTC_ETH_narrow.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.quickGamma_WBTC_ETH_narrow.NewStrategy,
          addresses.MATIC.V2.quickGamma_WBTC_ETH_narrow.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK'],
  },
  axlWBTC: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/axlwbtc.svg'],
    tokenAddress: addresses.BASE.axlWBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['axlwbtc'],
    },
  },
  moonwell_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Moonwell'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.moonwell_USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.moonwell_USDC.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_USDC.Underlying,
          addresses.BASE.V2.moonwell_USDC.mToken,
          addresses.BASE.V2.moonwell_USDC.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WELL'],
  },
  baseswap_axlUSDC_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/axlusdc.svg', './icons/eth.svg'],
    tokenNames: ['axlUSDC', 'ETH'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_axlUSDC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_axlUSDC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_axlUSDC_ETH.Underlying, 'axlUSDC', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_axlUSDC_ETH.NewStrategy,
          addresses.BASE.V2.baseswap_axlUSDC_ETH.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_axlWBTC_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/axlwbtc.svg', './icons/usdbc.svg'],
    tokenNames: ['axlWBTC', 'USDbC'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_axlWBTC_USDbC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_axlWBTC_USDbC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_axlWBTC_USDbC.Underlying, 'axlWBTC', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_axlWBTC_USDbC.NewStrategy,
          addresses.BASE.V2.baseswap_axlWBTC_USDbC.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_ETH_DAI: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/eth.svg', './icons/dai.svg'],
    tokenNames: ['ETH', 'DAI'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_ETH_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_ETH_DAI.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_ETH_DAI.Underlying, 'DAI_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_ETH_DAI.NewStrategy,
          addresses.BASE.V2.baseswap_ETH_DAI.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_USDbC_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/usdbc.svg', './icons/usdc.svg'],
    tokenNames: ['USDbC', 'USDC'],
    platform: ['BaseSwap'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.baseswap_USDbC_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_USDbC_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_USDbC_USDC.Underlying, 'USDC_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_USDbC_USDC.NewStrategy,
          addresses.BASE.V2.baseswap_USDbC_USDC.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_USDp_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/usdplus.svg', './icons/usdbc.svg'],
    tokenNames: ['USD+', 'USDbC'],
    platform: ['BaseSwap'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.baseswap_USDp_USDbC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_USDp_USDbC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_USDp_USDbC.Underlying, 'USDplus_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_USDp_USDbC.NewStrategy,
          addresses.BASE.V2.baseswap_USDp_USDbC.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_USDC_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    tokenNames: ['ETH', 'USDC'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_USDC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_USDC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_USDC_ETH.Underlying, 'USDC_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_USDC_ETH.NewStrategy,
          addresses.BASE.V2.baseswap_USDC_ETH.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  fxBSX: {
    chain: CHAIN_IDS.BASE,
    logoUrl: [''],
    tokenAddress: addresses.BASE.V2.xBSX.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.BASE.V2.xBSX.NewVault, '18', CHAIN_IDS.BASE],
    },
  },
  xBSX: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/xbsx.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['xBSX'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.xBSX.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.xBSX.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['basex'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM'],
  },
  WELL: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/well.svg'],
    tokenAddress: addresses.BASE.WELL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['moonwell-artemis'],
    },
  },
  WELL_old: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/well.svg'],
    tokenAddress: addresses.BASE.WELL_old,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['moonwell-artemis'],
    },
  },
  moonwell_CBETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/cbeth.svg'],
    tokenNames: ['CBETH'],
    platform: ['Moonwell'],
    tags: ['Beginners', 'LSD'],
    tokenAddress: addresses.BASE.V2.moonwell_CBETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_CBETH.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_CBETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-staked-eth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_CBETH.Underlying,
          addresses.BASE.V2.moonwell_CBETH.mToken,
          addresses.BASE.V2.moonwell_CBETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WELL'],
  },
  moonwell_DAI: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Moonwell'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.moonwell_DAI.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_DAI.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_DAI.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_DAI.Underlying,
          addresses.BASE.V2.moonwell_DAI.mToken,
          addresses.BASE.V2.moonwell_DAI.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WELL'],
  },
  moonwell_WETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/well.svg'],
    apyTokenSymbols: ['WELL'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Moonwell'],
    tags: ['Beginners'],
    tokenAddress: addresses.BASE.V2.moonwell_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.moonwell_WETH.NewVault,
    strategyAddress: addresses.BASE.V2.moonwell_WETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MOONWELL_FOLD,
        params: [
          addresses.BASE.V2.moonwell_WETH.Underlying,
          addresses.BASE.V2.moonwell_WETH.mToken,
          addresses.BASE.V2.moonwell_WETH.NewStrategy,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WELL'],
  },
  DAIplus_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/daiplus.svg'],
    tokenAddress: addresses.BASE.DAI_plus,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['overnight-dai'],
    },
  },
  USDplus_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/usdplus.svg'],
    tokenAddress: addresses.BASE.USD_plus,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd'],
    },
  },
  aerodrome_DAIp_USDp: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/daiplus.svg', './icons/usdplus.svg'],
    tokenNames: ['DAI+', 'USD+'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_DAIp_USDp.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_DAIp_USDp.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_DAIp_USDp.Underlying, 'DAIplus_base', 'USDplus_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_DAIp_USDp.Underlying,
          addresses.BASE.V2.aerodrome_DAIp_USDp.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  DOLA_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/dola.svg'],
    tokenAddress: addresses.BASE.DOLA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dola-usd'],
    },
  },
  aerodrome_DOLA_USDbC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/dola.svg', './icons/usdbc.svg'],
    tokenNames: ['DOLA', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_DOLA_USDbC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_DOLA_USDbC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_DOLA_USDbC.Underlying, 'DOLA_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_DOLA_USDbC.Underlying,
          addresses.BASE.V2.aerodrome_DOLA_USDbC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_USDp_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/usdplus.svg', './icons/usdbc.svg'],
    tokenNames: ['USD+', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_USDp_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_USDp_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_USDp_USDC.Underlying, 'USDplus_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_USDp_USDC.Underlying,
          addresses.BASE.V2.aerodrome_USDp_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  crvUSD_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/crvusd.svg'],
    tokenAddress: addresses.BASE.crvUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['crvusd'],
    },
  },
  CRV_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/curve.svg'],
    tokenAddress: addresses.BASE.CRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['curve-dao-token'],
    },
  },
  curve_USDC_USDbC_axlUSDC_crvUSD: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/curve.svg', './icons/crvusd.svg'],
    apyTokenSymbols: ['CRV', 'crvUSD'],
    logoUrl: ['./icons/usdc.svg', './icons/usdbc.svg', './icons/axlusdc.svg', './icons/crvusd.svg'],
    tokenNames: ['USDC', 'USDbC', 'axlUSDC', 'crvUSD'],
    platform: ['Curve'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.curve_USDC_USDbC_axlUSDC_crvUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.curve_USDC_USDbC_axlUSDC_crvUSD.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.BASE.V2.curve_USDC_USDbC_axlUSDC_crvUSD.Underlying,
        addresses.BASE.V2.curve_USDC_USDbC_axlUSDC_crvUSD.Underlying,
        '18',
        ['USDbC_base', 'USDC_base', 'axlUSDC', 'crvUSD_base'],
        CHAIN_IDS.BASE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CURVE_GAUGE,
        params: [
          'curve_USDC_USDbC_axlUSDC_crvUSD',
          addresses.BASE.V2.curve_USDC_USDbC_axlUSDC_crvUSD.Gauge,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
          addresses.BASE.V2.curve_USDC_USDbC_axlUSDC_crvUSD.NewStrategy,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  EQB: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eqb.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.EQB,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['equilibria-finance'],
    },
  },
  camelot_EQB_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eqb.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/eqb.svg', './icons/arb.svg'],
    apyTokenSymbols: ['EQB', 'ARB'],
    tokenNames: ['EQB', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_EQB_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_EQB_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.camelot_EQB_ETH.Underlying, 'EQB', 'WETH_arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_EQB_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_EQB_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_EQB_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'EQB'],
  },
  LODE: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/lode.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.LODE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lodestar'],
    },
  },
  RELAY_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/relay.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.RELAY,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['relay-token'],
    },
  },
  camelot_RELAY_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/relay.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/grail.svg', './icons/relay.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'RELAY', 'ARB'],
    tokenNames: ['RELAY', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_RELAY_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_RELAY_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.camelot_RELAY_ETH.Underlying,
        'RELAY_arbitrum',
        'WETH_arbitrum',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_RELAY_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_RELAY_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_RELAY_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'RELAY'],
  },
  THALES_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/thales.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.THALES,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['thales'],
    },
  },
  camelot_THALES_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/thales.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/grail.svg', './icons/thales.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'THALES', 'ARB'],
    tokenNames: ['THALES', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_THALES_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_THALES_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.camelot_THALES_ETH.Underlying,
        'THALES_arbitrum',
        'WETH_arbitrum',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_THALES_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_THALES_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_THALES_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'THALES'],
  },
  AERO: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/aero.svg'],
    tokenAddress: addresses.BASE.AERO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aerodrome-finance'],
    },
  },
  aerodrome_AERO_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/aero.svg', './icons/usdbc.svg'],
    tokenNames: ['AERO', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_AERO_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_AERO_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_AERO_USDC.Underlying, 'AERO', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_AERO_USDC.Underlying,
          addresses.BASE.V2.aerodrome_AERO_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_cbETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/cbeth.svg', './icons/eth.svg'],
    tokenNames: ['CBETH', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.BASE.V2.aerodrome_cbETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_cbETH_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_cbETH_ETH.Underlying, 'CBETH_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_cbETH_ETH.Underlying,
          addresses.BASE.V2.aerodrome_cbETH_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_ETH_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/eth.svg', './icons/usdbc.svg'],
    tokenNames: ['ETH', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_ETH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_ETH_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_ETH_USDC.Underlying, 'USDbC_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_ETH_USDC.Underlying,
          addresses.BASE.V2.aerodrome_ETH_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  tBTC_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/tbtc.svg'],
    tokenAddress: addresses.BASE.TBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tbtc'],
    },
  },
  aerodrome_tBTC_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/tbtc.svg', './icons/eth.svg'],
    tokenNames: ['tBTC', 'ETH'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_tBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_tBTC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_tBTC_ETH.Underlying, 'tBTC_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_tBTC_ETH.Underlying,
          addresses.BASE.V2.aerodrome_tBTC_ETH.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  aerodrome_tBTC_USDC: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/tbtc.svg', './icons/usdbc.svg'],
    tokenNames: ['tBTC', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.aerodrome_tBTC_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_tBTC_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_tBTC_USDC.Underlying, 'tBTC_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_tBTC_USDC.Underlying,
          addresses.BASE.V2.aerodrome_tBTC_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  wUSDR_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: [''],
    tokenAddress: addresses.BASE.wUSDR,
    decimals: '9',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-usdr'],
    },
  },
  aerodrome_wUSDR_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/aero.svg'],
    apyTokenSymbols: ['AERO'],
    logoUrl: ['./icons/wusdr.svg', './icons/usdbc.svg'],
    tokenNames: ['wUSDR', 'USDbC'],
    platform: ['Aerodrome'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.aerodrome_wUSDR_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.aerodrome_wUSDR_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.aerodrome_wUSDR_USDC.Underlying, 'wUSDR_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AERODROME,
        params: [
          addresses.BASE.V2.aerodrome_wUSDR_USDC.Underlying,
          addresses.BASE.V2.aerodrome_wUSDR_USDC.Gauge,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'AERO'],
  },
  COMP: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/comp.svg'],
    tokenAddress: addresses.COMP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['compound-governance-token'],
    },
  },
  USDbC_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdbc.svg'],
    tokenNames: ['USDbC'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.USDbC.Underlying,
    decimals: '6',
    vaultAddress: addresses.BASE.V2.USDbC.NewVault,
    strategyAddress: addresses.BASE.V2.USDbC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.BASE.V2.USDbC.Underlying,
          addresses.BASE.V2.USDbC.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'COMP'],
  },
  WETH_base: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/eth.svg'],
    tokenNames: ['ETH'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.BASE.V2.WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.WETH.NewVault,
    strategyAddress: addresses.BASE.V2.WETH.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.BASE.V2.WETH.Underlying,
          addresses.BASE.V2.WETH.Market,
          profitSharingCut10Percent,
          CHAIN_IDS.BASE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'COMP'],
  },
  USDCe_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    apyIconUrls: ['./icons/comp.svg'],
    apyTokenSymbols: ['COMP'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC.e'],
    platform: ['Compound V3'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.MATIC.V2.USDC.Underlying,
    decimals: '6',
    vaultAddress: addresses.MATIC.V2.USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.COMPOUND_V3,
        params: [
          addresses.MATIC.V2.USDC.Underlying,
          addresses.MATIC.V2.USDC.Market,
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'COMP'],
  },
  axlUSDC: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/axlusdc.svg'],
    tokenAddress: addresses.BASE.axlUSDC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['axlusdc'],
    },
  },
  BSWAP: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/bswap.svg'],
    tokenAddress: addresses.BASE.BSWAP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['baseswap'],
    },
  },
  BSX: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/bsx.svg'],
    tokenAddress: addresses.BASE.BSX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['basex'],
    },
  },
  CBETH_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/cbeth.svg'],
    tokenAddress: addresses.BASE.CBETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['coinbase-wrapped-staked-eth'],
    },
  },
  baseswap_BSX_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/bsx.svg', './icons/eth.svg'],
    tokenNames: ['BSX', 'ETH'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_BSX_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_BSX_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_BSX_ETH.Underlying, 'BSX', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_BSX_ETH.NewStrategy,
          addresses.BASE.V2.baseswap_BSX_ETH.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_BSWAP_ETH: {
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/bswap.svg', './icons/eth.svg'],
    tokenNames: ['BSWAP', 'ETH'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_BSWAP_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_BSWAP_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_BSWAP_ETH.Underlying, 'BSWAP', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_BSWAP_ETH.NewStrategy,
          addresses.BASE.V2.baseswap_BSWAP_ETH.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_CBETH_ETH: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/cbeth.svg', './icons/eth.svg'],
    tokenNames: ['CBETH', 'ETH'],
    platform: ['BaseSwap'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.BASE.V2.baseswap_CBETH_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_CBETH_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_CBETH_ETH.Underlying, 'CBETH_base', 'WETH_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_CBETH_ETH.NewStrategy,
          addresses.BASE.V2.baseswap_CBETH_ETH.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_DAI_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/dai.svg', './icons/usdbc.svg'],
    tokenNames: ['DAI', 'USDbC'],
    platform: ['BaseSwap'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.BASE.V2.baseswap_DAI_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_DAI_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_DAI_USDC.Underlying, 'DAI_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_DAI_USDC.NewStrategy,
          addresses.BASE.V2.baseswap_DAI_USDC.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  baseswap_ETH_USDC: {
    inactive: true,
    chain: CHAIN_IDS.BASE,
    apyIconUrls: ['./icons/bsx.svg', './icons/xbsx.svg', './icons/bswap.svg'],
    apyTokenSymbols: ['BSX', 'xBSX', 'BSWAP'],
    logoUrl: ['./icons/eth.svg', './icons/usdbc.svg'],
    tokenNames: ['ETH', 'USDbC'],
    platform: ['BaseSwap'],
    tags: ['Advanced'],
    tokenAddress: addresses.BASE.V2.baseswap_ETH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.BASE.V2.baseswap_ETH_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.BASE.V2.baseswap_ETH_USDC.Underlying, 'WETH_base', 'USDbC_base'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BASESWAP_V2,
        params: [
          addresses.BASE.V2.baseswap_ETH_USDC.NewStrategy,
          addresses.BASE.V2.baseswap_ETH_USDC.NFTPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BSWAP'],
  },
  DAI_base: {
    chain: CHAIN_IDS.BASE,
    logoUrl: ['./icons/dai.svg'],
    tokenAddress: addresses.BASE.DAI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
  },
  iFARM_base: {
    chain: CHAIN_IDS.BASE,
    decimals: '18',
    tokenAddress: addresses.BASE.iFARM,
    tokenNames: ['iFARM'],
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.F_TOKEN, params: [addresses.iFARM, '18'] },
  },
  balancer_DOLA_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    logoUrl: ['./icons/dola.svg', './icons/usdc.svg'],
    platform: ['Aura Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['DOLA', 'USDC.e'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_DOLA_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_DOLA_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_DOLA_USDC.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_DOLA_USDC.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['dola_usdc_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'BAL', 'AURA'],
  },
  tBTC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/tbtc.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.TBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tbtc'],
    },
  },
  balancer_tBTC_WBTC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/tbtc.svg', './icons/wbtc.svg'],
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    platform: ['Aura Finance'],
    tokenNames: ['tBTC', 'WBTC'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_tBTC_WBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_tBTC_WBTC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_tBTC_WBTC.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_tBTC_WBTC.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['tbtc_wbtc_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL', 'AURA'],
  },
  balancer_tBTC_WETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/tbtc.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    platform: ['Aura Finance'],
    tokenNames: ['tBTC', 'ETH'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_tBTC_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_tBTC_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_tBTC_WETH.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_tBTC_WETH.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['tbtc_weth_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL', 'AURA'],
  },
  GENE_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/gene.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.GENE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['genomesdao'],
    },
  },
  GNOME_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/gnome.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.GNOME,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gnome'],
    },
  },
  camelot_GENE_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/gene.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/gnome.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GNOME', 'ARB'],
    tokenNames: ['GENE', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced', 'DeSci'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_GENE_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_GENE_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.camelot_GENE_ETH.Underlying,
        'GENE_arbitrum',
        'WETH_arbitrum',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_GENE_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_GENE_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_GENE_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GNOME'],
  },
  camelot_GNOME_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/gnome.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/gene.svg'],
    apyTokenSymbols: ['GENE'],
    tokenNames: ['GNOME', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced', 'DeSci'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_GNOME_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_GNOME_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.camelot_GNOME_ETH.Underlying,
        'GNOME_arbitrum',
        'WETH_arbitrum',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_GNOME_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_GNOME_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_GNOME_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GENE'],
  },
  camelot_GRAIL_ARB: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/grail.svg', './icons/arb.svg'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL'],
    tokenNames: ['GRAIL', 'ARB'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_GRAIL_ARB.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_GRAIL_ARB.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.camelot_GRAIL_ARB.Underlying, 'GRAIL', 'ARB'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_GRAIL_ARB.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_GRAIL_ARB.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_GRAIL_ARB.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL'],
  },
  GMX: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/gmx.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.GMX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gmx'],
    },
  },
  camelot_iFARM_ETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/ifarm.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg', './icons/arb.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL', 'ARB'],
    tokenNames: ['iFARM', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_iFARM_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_iFARM_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.camelot_iFARM_ETH.Underlying,
        'iFARM_arbitrum',
        'WETH_arbitrum',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_iFARM_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_iFARM_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_iFARM_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL', 'ARB'],
  },
  camelot_ARB_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/arb.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL'],
    tokenNames: ['ARB', 'ETH'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_ARB_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_ARB_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.camelot_ARB_ETH.Underlying, 'ARB', 'WETH_arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_ARB_ETH.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_ARB_ETH.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_ARB_ETH.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL'],
  },
  camelot_ETH_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/grail.svg', './icons/xgrail.svg'],
    apyTokenSymbols: ['GRAIL', 'xGRAIL'],
    tokenNames: ['ETH', 'USDC.e'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.camelot_ETH_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.camelot_ETH_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.camelot_ETH_USDC.Underlying,
        'WETH_arbitrum',
        'USDC_arbitrum',
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_LP,
        params: [
          addresses.ARBITRUM_ONE.V2.camelot_ETH_USDC.NewStrategy,
          addresses.ARBITRUM_ONE.V2.camelot_ETH_USDC.NFTPool,
          addresses.ARBITRUM_ONE.V2.camelot_ETH_USDC.NitroPool,
          profitSharingCut10Percent,
        ],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'GRAIL', 'xGRAIL'],
  },
  fxGRAIL: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.V2.xGRAIL.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.xGRAIL.NewVault, '18', CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  xGRAIL: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/xgrail.svg'],
    apyIconUrls: [
      './icons/eth.svg',
      './icons/usdc.svg',
      './icons/xgrail.svg',
      './icons/dmt.svg',
      './icons/winr.svg',
      './icons/ape.svg',
    ],
    apyTokenSymbols: ['ETH-USDC.e', 'xGRAIL', 'DMT', 'WINR', 'APE'],
    tokenNames: ['xGRAIL'],
    platform: ['Camelot'],
    tags: ['Advanced'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.xGRAIL.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.xGRAIL.NewVault,
    strategyAddress: addresses.ARBITRUM_ONE.V2.xGRAIL.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['camelot-token'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CAMELOT_XGRAIL,
        params: [addresses.ARBITRUM_ONE.V2.xGRAIL.NewStrategy, profitSharingCut10Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ETH-USDC.e', 'xGRAIL'],
  },
  GRAIL: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/grail.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.GRAIL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['camelot-token'],
    },
  },
  DMT: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/dmt.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.DMT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dream-machine-token'],
    },
  },
  WINR: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/winr.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.WINR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['winr-protocol'],
    },
  },
  aWETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/am-weth.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.aWETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ethereum'],
    },
  },
  waWETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waWETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ARBITRUM_ONE.waWETH, addresses.ARBITRUM_ONE.aWETH, CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  'bb-aWETH_arbitrum': {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.bbaWETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.bbaWETH,
        '0xda1cd1711743e57dd57102e9e61b75f3587703da0000000000000000000003fc',
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  aDAI_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/am-dai.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.aDAI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
  },
  waDAI_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waDAI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ARBITRUM_ONE.waDAI, addresses.ARBITRUM_ONE.aDAI, CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  aUSDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/am-usdc.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.aUSDC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
  },
  waUSDC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waUSDC,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ARBITRUM_ONE.waUSDC, addresses.ARBITRUM_ONE.aUSDC, CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  aUSDT_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/am-usdt.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.aUSDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
  },
  waUSDT_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.waUSDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.ARBITRUM_ONE.waUSDT, addresses.ARBITRUM_ONE.aUSDT, CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  'bb-aDAI_arbitrum': {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.bbaDAI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.bbaDAI,
        '0x9e34631547adcf2f8cefa0f5f223955c7b137571000000000000000000000407',
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  'bb-aUSDC_arbitrum': {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.bbaUSDC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.bbaUSDC,
        '0x7c82a23b4c48d796dee36a9ca215b641c6a8709d000000000000000000000406',
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  'bb-aUSDT_arbitrum': {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.bbaUSDT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.bbaUSDT,
        '0x4739e50b59b552d490d3fdc60d200977a38510c0000000000000000000000409',
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  rETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [],
    tokenAddress: addresses.ARBITRUM_ONE.rETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['rocket-pool-eth'],
    },
  },
  amETH: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/am-weth.svg'],
    tokenAddress: addresses.MATIC.amETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ethereum'],
    },
  },
  wamETH: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.wamETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [addresses.MATIC.wamETH, addresses.MATIC.amETH, CHAIN_IDS.POLYGON_MAINNET],
    },
  },
  'bb-amETH': {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.bbamETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.bbamETH,
        '0x43894de14462b421372bcfe445fa51b1b4a0ff3d000000000000000000000b36',
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
  },
  OETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/oeth.svg'],
    tokenAddress: addresses.OETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['origin-ether'],
    },
  },
  curve_OETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/oeth.svg', './icons/eth.svg'],
    tokenNames: ['OETH', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.V2.curve_OETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_OETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_OETH.Underlying,
        addresses.V2.curve_OETH.Underlying,
        '18',
        ['OETH', 'ETH'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['oeth', profitSharingCut15Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  crvUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/crvusd.svg'],
    tokenAddress: addresses.crvUSD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['crvusd'] },
  },
  curve_crvUSD_USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/crvusd.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'Stable'],
    tokenNames: ['crvUSD', 'USDC'],
    tokenAddress: addresses.V2.curve_crvUSD_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.curve_crvUSD_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.curve_crvUSD_USDC.Underlying,
        addresses.V2.curve_crvUSD_USDC.Underlying,
        18,
        ['crvUSD', 'USDC'],
        CHAIN_IDS.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['crvusdc', profitSharingCut15Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CRV'],
  },
  AURA_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.AURA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aura-finance'],
    },
  },
  balancer_2EUR_PAR_v2: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/jeur.svg', './icons/par.svg'],
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg'],
    apyTokenSymbols: ['BAL', 'AURA'],
    tokenNames: ['jEUR', 'PAR'],
    platform: ['Aura Finance'],
    tags: ['Advanced', 'Stable'],
    tokenAddress: addresses.MATIC.V2.balancer_2EUR_PAR_v2.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.balancer_2EUR_PAR_v2.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.balancer_2EUR_PAR_v2.Underlying,
        addresses.MATIC.V2.balancer_2EUR_PAR_v2.PoolId,
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['jeur_par_polygon', profitSharingCut8Percent, CHAIN_IDS.POLYGON_MAINNET],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL'],
  },
  USDR_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdr.svg'],
    tokenAddress: addresses.MATIC.USDR,
    decimals: '9',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['real-usd'] },
  },
  USDR_old_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdr.svg'],
    tokenAddress: addresses.MATIC.USDR_old,
    decimals: '9',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['real-usd'] },
  },
  RDNT: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rdnt.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.RDNT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['radiant-capital'] },
  },
  balancer_RDNT_ETH: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rdnt.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/balancer.svg', './icons/aura.svg', './icons/arb.svg'],
    apyTokenSymbols: ['BAL', 'AURA', 'ARB'],
    platform: ['Aura Finance'],
    tags: ['Advanced'],
    tokenNames: ['RDNT', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.balancer_RDNT_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.balancer_RDNT_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.ARBITRUM_ONE.V2.balancer_RDNT_ETH.Underlying,
        addresses.ARBITRUM_ONE.V2.balancer_RDNT_ETH.PoolId,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.AURA,
        params: ['rdnt_eth_arbitrum', profitSharingCut10Percent, CHAIN_IDS.ARBITRUM_ONE],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL', 'AURA'],
  },
  USDPlus_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdplus.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDPlus,
    decimals: '6',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['usd'] },
  },
  FRAX_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/frax.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.FRAX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['frax'] },
  },
  ARB: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/arb.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.ARB,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['arbitrum'] },
  },
  DPX_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/dpx.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.DPX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['dopex'] },
  },
  RDPX_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/rdpx.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.RDPX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_ID, params: ['dopex-rebate-token'] },
  },
  sushi_DPX_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/dpx.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/sushi.svg', './icons/dpx.svg'],
    apyTokenSymbols: ['SUSHI', 'DPX'],
    platform: ['SushiSwap'],
    tags: ['Advanced'],
    tokenNames: ['DPX', 'ETH'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.sushi_DPX_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.sushi_DPX_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.sushi_DPX_ETH.Underlying, 'WETH_arbitrum', 'DPX_arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [
          addresses.ARBITRUM_ONE.V2.sushi_DPX_ETH.PoolId,
          'WETH_arbitrum',
          'DPX_arbitrum',
          profitSharingCut10Percent,
          CHAIN_IDS.ARBITRUM_ONE,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DPX'],
  },
  pCRV: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.CRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['curve-dao-token'],
    },
  },
  frxETH_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.frxETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax-ether'],
    },
  },
  SPHERE: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.SPHERE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['sphere-finance'],
    },
  },
  wstETH_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.wstETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
  },
  wUSDR_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.wUSDR,
    decimals: '9',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-usdr'],
    },
  },
  STAR_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [''],
    tokenAddress: addresses.MATIC.STAR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['preon-star'],
    },
  },
  POISON: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/poison.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.POISON,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['poison-finance'],
    },
  },
  iPoison: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/ipoison.svg'],
    apyIconUrls: ['./icons/poison.svg'],
    apyTokenSymbols: ['POISON'],
    subLabel: 'Auto-compounding',
    platform: ['Poison'],
    tags: ['Advanced'],
    tokenNames: ['iPoison'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.iPoison.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.iPoison.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.WRAPPED_TOKEN,
      params: [
        addresses.ARBITRUM_ONE.V2.iPoison.Underlying,
        addresses.ARBITRUM_ONE.POISON,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.POISON,
        params: [
          addresses.ARBITRUM_ONE.V2.iPoison.Underlying,
          addresses.ARBITRUM_ONE.V2.iPoison.PoolId,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'POISON'],
  },
  poison_pGOLD_USDC: {
    inactive: true,
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/pgold.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/poison.svg'],
    apyTokenSymbols: ['POISON'],
    subLabel: 'Auto-compounding',
    platform: ['Poison'],
    tags: ['Advanced'],
    tokenNames: ['pGOLD', 'USDC.e'],
    tokenAddress: addresses.ARBITRUM_ONE.V2.poison_pGOLD_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.ARBITRUM_ONE.V2.poison_pGOLD_USDC.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.poison_pGOLD_USDC.Underlying, 'pGOLD', 'USDC_arbitrum'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.POISON,
        params: [
          addresses.ARBITRUM_ONE.V2.poison_pGOLD_USDC.Underlying,
          addresses.ARBITRUM_ONE.V2.poison_pGOLD_USDC.PoolId,
          profitSharingCut10Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'POISON'],
  },
  fiPoison: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [''],
    tokenAddress: addresses.ARBITRUM_ONE.V2.iPoison.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.F_TOKEN,
      params: [addresses.ARBITRUM_ONE.V2.iPoison.NewVault, '18', CHAIN_IDS.ARBITRUM_ONE],
    },
  },
  pGOLD: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/pgold.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.pGOLD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.SUSHISWAP_PAIR,
      params: [
        addresses.ARBITRUM_ONE.pGOLD,
        addresses.ARBITRUM_ONE.USDC,
        6,
        CHAIN_IDS.ARBITRUM_ONE,
      ],
    },
  },
  iFARM_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    decimals: '18',
    tokenAddress: addresses.ARBITRUM_ONE.iFARM,
    tokenNames: ['iFARM'],
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.F_TOKEN, params: [addresses.iFARM, '18'] },
  },
  USDT_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/usdt.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.USDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.USDT] },
  },
  WBTC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/wbtc.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.WBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
  },
  RENBTC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/ren.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.RENBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.RENBTC] },
  },
  WETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eth.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.WETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WETH] },
  },
  EURS_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/eurs.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.EURS,
    decimals: '2',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.EURS] },
  },
  DAI_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    tokenAddress: addresses.ARBITRUM_ONE.DAI,
    logoUrl: ['./icons/dai.svg'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DAI] },
  },
  MAGIC_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    tokenAddress: addresses.ARBITRUM_ONE.MAGIC,
    logoUrl: ['./icons/magic.svg'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.MAGIC] },
  },
  MIM_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    tokenAddress: addresses.ARBITRUM_ONE.MIM,
    logoUrl: ['./icons/mim.svg'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.MIM] },
  },
  SPELL_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    tokenAddress: addresses.ARBITRUM_ONE.SPELL,
    logoUrl: ['./icons/spell.svg'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.SPELL] },
  },
  SUSHI_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    tokenAddress: addresses.ARBITRUM_ONE.SUSHI,
    logoUrl: ['./icons/sushi.svg'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.SUSHI] },
  },
  quickGamma_MATIC_ETH_narrow: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/matic.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg', './icons/matic.svg'],
    apyTokenSymbols: ['dQUICK', 'WMATIC'],
    subLabel: 'Narrow',
    tokenNames: ['MATIC', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.quickGamma_MATIC_ETH_narrow.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_MATIC_ETH_narrow.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [
        addresses.MATIC.V2.quickGamma_MATIC_ETH_narrow.Underlying,
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.quickGamma_MATIC_ETH_narrow.NewStrategy,
          addresses.MATIC.V2.quickGamma_MATIC_ETH_narrow.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK', 'WMATIC'],
  },
  quickGamma_MATIC_ETH_wide: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/matic.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg', './icons/matic.svg'],
    apyTokenSymbols: ['dQUICK', 'WMATIC'],
    subLabel: 'Wide',
    tokenNames: ['MATIC', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.quickGamma_MATIC_ETH_wide.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_MATIC_ETH_wide.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.quickGamma_MATIC_ETH_wide.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.GAMMA_API,
        params: [
          addresses.MATIC.V2.quickGamma_MATIC_ETH_wide.MasterChef,
          addresses.MATIC.V2.quickGamma_MATIC_ETH_wide.Underlying,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK', 'WMATIC'],
  },
  quickGamma_MATIC_USDC_narrow: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/matic.svg', './icons/usdc.svg'],
    apyIconUrls: ['./icons/quick.svg', './icons/matic.svg'],
    apyTokenSymbols: ['dQUICK', 'WMATIC'],
    subLabel: 'Narrow',
    tokenNames: ['MATIC', 'USDC.e'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.quickGamma_MATIC_USDC_narrow.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_MATIC_USDC_narrow.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [
        addresses.MATIC.V2.quickGamma_MATIC_USDC_narrow.Underlying,
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.quickGamma_MATIC_USDC_narrow.NewStrategy,
          addresses.MATIC.V2.quickGamma_MATIC_USDC_narrow.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK', 'WMATIC'],
  },
  quickGamma_USDC_ETH_narrow: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdc.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/quick.svg', './icons/matic.svg'],
    apyTokenSymbols: ['dQUICK', 'WMATIC'],
    subLabel: 'Narrow',
    tokenNames: ['USDC.e', 'ETH'],
    platform: ['Quickswap', 'Gamma'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.quickGamma_USDC_ETH_narrow.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickGamma_USDC_ETH_narrow.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.GAMMA_ONCHAIN,
      params: [addresses.MATIC.V2.quickGamma_USDC_ETH_narrow.Underlying, CHAIN_IDS.POLYGON_MAINNET],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MERKL,
        params: [
          addresses.MATIC.V2.quickGamma_USDC_ETH_narrow.NewStrategy,
          addresses.MATIC.V2.quickGamma_USDC_ETH_narrow.PoolAddress,
          CHAIN_IDS.POLYGON_MAINNET,
          profitSharingCut8Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'dQUICK', 'WMATIC'],
  },
  SWISE: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.SWISE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['stakewise'],
    },
  },
  LDO: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.LDO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lido-dao'],
    },
  },
  wstETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.wstETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
  },
  wstETH_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [],
    tokenAddress: addresses.ARBITRUM_ONE.wstETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['wrapped-steth'],
    },
  },
  stMATIC: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.stMATIC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lido-staked-matic'],
    },
  },
  maticX: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.maticX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['stader-maticx'],
    },
  },
  pSD: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.SD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['stader'],
    },
  },
  pLDO: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.LDO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lido-dao'],
    },
  },
  bal_POLYBASE: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/matic.svg', './icons/usdc.svg', './icons/eth.svg', './icons/balancer.svg'],
    apyIconUrls: ['./icons/balancer.svg'],
    apyTokenSymbols: ['BAL'],
    tokenNames: ['MATIC', 'USDC', 'ETH', 'BAL'],
    platform: ['Balancer'],
    tags: ['Advanced'],
    tokenAddress: addresses.MATIC.V2.balancer_POLYBASE.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.balancer_POLYBASE.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.V2.balancer_POLYBASE.Underlying,
        addresses.MATIC.V2.balancer_POLYBASE.PoolId,
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER_GAUGE_SIDECHAIN,
        params: [
          'bal_POLYBASE',
          addresses.MATIC.V2.balancer_POLYBASE.Gauge,
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL'],
  },
  '80BAL-20WETH': {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.balWeth,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.MATIC.balWeth,
        '0x3d468ab2329f296e1b9d8476bb54dd77d8c2320f000200000000000000000426',
        CHAIN_IDS.POLYGON_MAINNET,
      ],
    },
  },
  USDD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/usdd.png'],
    tokenAddress: addresses.USDD,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usdd'],
    },
  },
  DOLA: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/dola.svg'],
    tokenAddress: addresses.DOLA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dola-usd'],
    },
  },
  FRAX: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/frax.svg'],
    tokenAddress: addresses.FRAX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['frax'],
    },
  },
  FRAXBP: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/fraxbp.svg'],
    tokenAddress: addresses.FRAXBP,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [addresses.FRAXBP_Miner, addresses.FRAXBP, '18', ['FRAX', 'USDC']],
    },
  },
  pETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/peth.svg'],
    tokenAddress: addresses.pETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['peth'],
    },
  },
  convex_pETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/peth.svg', './icons/eth.svg'],
    tokenNames: ['pETH', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.convex_pETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.convex_pETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['weth'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['peth', profitSharingCut15Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  pBTC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/pbtc.png'],
    tokenAddress: addresses.pBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['ptokens-btc-2'],
    },
  },
  sBTC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/sbtc.png'],
    tokenAddress: addresses.sBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['sbtc'],
    },
  },
  sbtcCrv: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/sbtccrv.png'],
    tokenAddress: addresses.sbtcCrv,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [addresses.sbtcCrv_Miner, addresses.sbtcCrv, '18', ['WBTC', 'sBTC', 'RENBTC']],
    },
  },
  CVX: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/cvx.svg'],
    tokenAddress: addresses.CVX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['convex-finance'],
    },
  },
  convex_CVX_ETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/eth.svg', './icons/cvx.svg'],
    tokenNames: ['CVX', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.convex_CVX_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.convex_CVX_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.convex_CVX_ETH.Miner,
        addresses.V2.convex_CVX_ETH.Underlying,
        '18',
        ['CVX', 'ETH'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['cvxeth', profitSharingCut15Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  stETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/steth.svg'],
    tokenAddress: addresses.stETH,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['staked-ether'],
    },
  },
  crvSTETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/steth.svg', './icons/eth.svg'],
    tokenNames: ['stETH', 'ETH'],
    platform: ['Convex Finance'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.V2.crvSTETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvSTETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.crvSTETH.Miner,
        addresses.V2.crvSTETH.Underlying,
        '18',
        ['stETH', 'ETH'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['steth-ng', profitSharingCut15Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvThreeCrypto: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/usdt.svg', './icons/wbtc.svg', './icons/eth.svg'],
    tokenNames: ['USDT', 'WBTC', 'ETH'],
    platform: ['Curve'],
    tokenAddress: addresses.V2.crvThreeCrypto.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvThreeCrypto.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [
        addresses.V2.crvThreeCrypto.Miner,
        addresses.V2.crvThreeCrypto.Underlying,
        '18',
        ['WBTC', 'WETH', 'USDT'],
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['tricrypto2', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  convex_cvxCRV: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg', './icons/3crv.svg'],
    apyTokenSymbols: ['CRV', 'CVX', '3CRV'],
    logoUrl: ['./icons/curve.svg', './icons/cvx.svg'],
    tokenNames: ['cvxCRV'],
    platform: ['Convex Finance'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.convex_cvxCRV.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.convex_cvxCRV.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.cvxCRV] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['convex_cvxCRV', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CVX', 'CRV'],
  },
  USDC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdc.svg'],
    tokenNames: ['USDC'],
    platform: ['Morpho - Gauntlet Frontier'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.USDC,
    decimals: '6',
    vaultAddress: addresses.V2.USDC.NewVault,
    strategyAddress: addresses.V2.USDC.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['usd-coin'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [addresses.V2.USDC.MorphoVault, profitSharingCut15Percent, CHAIN_IDS.ETH_MAINNET],
      },
    ],
  },
  DAI: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/dai.svg'],
    tokenNames: ['DAI'],
    platform: ['Morpho - Gauntlet Core'],
    tags: ['Beginners', 'Stable'],
    tokenAddress: addresses.DAI,
    decimals: '18',
    vaultAddress: addresses.V2.DAI.NewVault,
    strategyAddress: addresses.V2.DAI.NewStrategy,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DAI] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [addresses.V2.DAI.MorphoVault, profitSharingCut15Percent, CHAIN_IDS.ETH_MAINNET],
      },
    ],
  },
  USDT: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/morpho.svg'],
    apyTokenSymbols: ['MORPHO'],
    logoUrl: ['./icons/usdt.svg'],
    tokenNames: ['USDT'],
    platform: ['Morpho - Steakhouse'],
    tags: ['Beginner', 'Stable'],
    tokenAddress: addresses.USDT,
    decimals: '6',
    vaultAddress: addresses.V2.USDT.NewVault,
    strategyAddress: addresses.V2.USDT.NewStrategy,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['tether'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MORPHO_VAULT,
        params: [addresses.V2.USDT.MorphoVault, profitSharingCut15Percent, CHAIN_IDS.ETH_MAINNET],
      },
    ],
  },
  LOOKS: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/looks.svg'],
    tokenAddress: addresses.LOOKS,
    decimals: '18',
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['looksrare'],
    },
    apyIconUrls: ['./icons/eth.svg'],
    apyTokenSymbols: ['WETH'],
    tokenNames: ['LOOKS'],
    platform: ['LooksRare'],
    tags: ['Advanced'],
    vaultAddress: addresses.V2.looks_LOOKS.NewVault,
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.LOOKSRARE_SINGLE_ASSET,
        params: [addresses.V2.looks_LOOKS.RewardPool, profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LOOKS'],
  },
  uni_LOOKS_ETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    apyIconUrls: ['./icons/looks.svg'],
    apyTokenSymbols: ['LOOKS'],
    logoUrl: ['./icons/looks.svg', './icons/eth.svg'],
    tokenNames: ['LOOKS', 'ETH'],
    platform: ['LooksRare'],
    tokenAddress: addresses.V2.uni_LOOKS_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.uni_LOOKS_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.uni_LOOKS_ETH.Underlying, 'LOOKS', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'LOOKS'],
  },
  pGENE: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/gene.svg'],
    tokenAddress: addresses.MATIC.pGENE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['genomesdao'],
    },
  },
  pGNOME: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/gnome.svg'],
    tokenAddress: addresses.MATIC.pGNOME,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['gnome'],
    },
  },
  SUSHI_GENE_ETH: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/gene.svg', './icons/eth.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['GENE', 'ETH'],
    platform: ['Sushiswap', 'Genomes'],
    tags: ['Advanced', 'DeSci'],
    tokenAddress: addresses.MATIC.V2.SUSHI_GENE_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.SUSHI_GENE_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.SUSHI_GENE_ETH.Underlying, 'pGENE', 'WETH_polygon'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pGNOME'],
  },
  SUSHI_GNOME_ETH: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/gnome.svg', './icons/eth.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['GNOME', 'ETH'],
    platform: ['Sushiswap', 'Genomes'],
    tags: ['Advanced', 'DeSci'],
    tokenAddress: addresses.MATIC.V2.SUSHI_GNOME_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.SUSHI_GNOME_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.SUSHI_GNOME_ETH.Underlying, 'pGNOME', 'WETH_polygon'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM', 'pGENE'],
  },
  IDLE: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/idle.svg'],
    tokenAddress: addresses.IDLE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['idle'],
    },
  },
  ORC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/orc.svg'],
    tokenAddress: addresses.ORC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['orbit-chain'],
    },
  },
  UniV3_ORC_ETH: {
    inactive: true,
    disableAutoSwap: true,
    isSingleAssetWithdrawalAllowed: false,
    chain: CHAIN_IDS.ETH_MAINNET,
    subLabel: 'Orbit Chain',
    isUniv3: true,
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/orc.svg', './icons/eth.svg'],
    tokenNames: ['ORC', 'ETH'],
    platform: ['Uniswap V3'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.UniV3_ORC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ORC_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ORC_ETH.NewVault, 'ORC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ORC', 'WETH'],
  },
  CNG: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/cng.svg'],
    tokenAddress: addresses.CNG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_V3,
      params: ['CNG', 'WETH', 10000],
    },
  },
  ecoCNG: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/ecocng.svg'],
    tokenAddress: addresses.ecoCNG,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_V3,
      params: ['CNG', 'WETH', 10000],
    },
  },
  UniV3_CNG_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    subLabel: 'Changer',
    isUniv3: true,
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/eth.svg', './icons/cng.svg'],
    tokenNames: ['CNG', 'ETH'],
    platform: ['Uniswap V3'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.UniV3_CNG_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_CNG_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_CNG_ETH.NewVault, 'CNG', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'CNG', 'WETH'],
    disableAutoSwap: true,
  },
  YEL: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/yel.svg'],
    tokenAddress: addresses.YEL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['yel-finance'],
    },
  },
  sushi_YEL_ETH: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/yel.svg', './icons/eth.svg'],
    apyIconUrls: ['./icons/yel.svg'],
    apyTokenSymbols: ['YEL'],
    tokenNames: ['YEL', 'ETH'],
    platform: ['Sushiswap'],
    tags: ['Advanced'],
    tokenAddress: addresses.V2.sushi_YEL_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_YEL_ETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_YEL_ETH.Underlying, 'YEL', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: 'YEL',
        params: [addresses.V2.sushi_YEL_ETH.PoolId, profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'YEL', 'ETH'],
  },
  UniV3_ETH_sETH2: {
    inactive: true,
    zapFrontrunProtection: true,
    subLabel: 'StakeWise',
    chain: CHAIN_IDS.ETH_MAINNET,
    isUniv3: true,
    apyIconUrls: ['./icons/univ3.svg', './icons/reth2.svg', './icons/swise.svg'],
    apyTokenSymbols: ['UNI', 'rETH2', 'SWISE'],
    logoUrl: ['./icons/eth.svg', './icons/seth.svg'],
    tokenNames: ['ETH', 'sETH2'],
    platform: ['Uniswap V3'],
    tags: ['Advanced', 'LSD'],
    tokenAddress: addresses.V2.UniV3_ETH_sETH2.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ETH_sETH2.NewVault,
    pricesInfo: {
      ETH: ['Min price: 1.006 sETH2 per ETH', 'Max price: 1.0121 sETH2 per ETH'],
      sETH2: ['Min price: 0.98807 ETH per sETH2', 'Max price: 0.99402 ETH per sETH2'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ETH_sETH2.NewVault, 'WETH', 'sETH2'],
    },
    estimateApyFunctions: [
      {
        type: 'STAKEWISE',
        params: [
          addresses.V2.UniV3_ETH_sETH2.NewVault,
          '0x7379e81228514a1D2a6Cf7559203998E20598346',
          profitSharingCut15Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WETH', 'sETH2', 'rETH2', 'SWISE'],
  },
  quick_IFARM_QUICK: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/ifarm.svg', './icons/quick.svg'],
    tokenNames: ['IFARM', 'QUICK'],
    platform: ['Quickswap'],
    tokenAddress: addresses.MATIC.V2.quickswap_IFARM_QUICK.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.quickswap_IFARM_QUICK.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.MATIC.V2.quickswap_IFARM_QUICK.Underlying, 'miFARM', 'QUICK'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['miFARM'],
  },
  WETH_polygon: {
    inactive: true,
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/eth.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH'],
    platform: ['IDLE'],
    tokenAddress: addresses.MATIC.V2.polygon_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.MATIC.V2.polygon_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.WETH],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.IDLE_FINANCE,
        params: [
          'WETH_polygon',
          '0xfdA25D931258Df948ffecb66b5518299Df6527C4',
          profitSharingCut8Percent,
          CHAIN_IDS.POLYGON_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'wMATIC'],
  },
  USDT_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/usdt.svg'],
    tokenAddress: addresses.MATIC.USDT,
    decimals: '6',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.USDT],
    },
  },
  WBTC_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/wbtc.svg'],
    tokenAddress: addresses.MATIC.WBTC,
    decimals: '8',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.WBTC],
    },
  },
  DAI_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.DAI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dai'],
    },
  },
  miFARM: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    decimals: '18',
    tokenAddress: addresses.MATIC.miFARM,
    tokenNames: ['miFARM'],
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.F_TOKEN, params: [addresses.iFARM, '18'] },
  },
  WMATIC: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    decimals: '18',
    logoUrl: ['./icons/matic.svg'],
    tokenAddress: addresses.MATIC.WMATIC,
    tokenNames: ['MATIC'],
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['polygon-ecosystem-token'],
    },
  },
  QUICK: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/quick.svg'],
    tokenAddress: addresses.MATIC.QUICK,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['quick'],
    },
  },
  dQUICK: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/quick.svg'],
    tokenAddress: addresses.MATIC.dQUICK,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['dragons-quick'],
    },
  },
  JRT: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/jrt.svg'],
    tokenAddress: addresses.MATIC.JRT,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['jarvis-reward-token'],
    },
  },
  AURA: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.AURA,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['aura-finance'],
    },
  },
  BAL: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/balancer.svg'],
    tokenAddress: addresses.BAL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['balancer'],
    },
  },
  BAL_polygon: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/balancer.svg'],
    tokenAddress: addresses.MATIC.BAL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['balancer'],
    },
  },
  BAL_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: ['./icons/balancer.svg'],
    tokenAddress: addresses.ARBITRUM_ONE.BAL,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['balancer'],
    },
  },
  LDO_arbitrum: {
    chain: CHAIN_IDS.ARBITRUM_ONE,
    logoUrl: [],
    tokenAddress: addresses.ARBITRUM_ONE.LDO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['lido-dao'],
    },
  },
  bal_BAL_WETH: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    subLabel: '80%/20%',
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/balancer.svg', './icons/eth.svg'],
    tokenNames: ['BAL', 'ETH'],
    platform: ['Balancer'],
    tokenAddress: addresses.V2.bal_BAL_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.bal_BAL_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.BALANCER,
      params: [
        addresses.V2.bal_BAL_WETH.Underlying,
        addresses.V2.bal_BAL_WETH.PoolId,
        CHAIN_IDS.ETH_MAINNET,
      ],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.BALANCER,
        params: [
          addresses.V2.bal_BAL_WETH.Underlying,
          addresses.V2.bal_BAL_WETH.PoolId,
          '25750',
          profitSharingCut30Percent,
          CHAIN_IDS.ETH_MAINNET,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'BAL', 'WETH'],
  },
  UniV3_USDC_ETH: {
    inactive: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    subLabel: 'ETH Range: 1.9K⟷3.5K',
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/usdc.svg', './icons/eth.svg'],
    tokenNames: ['USDC', 'ETH'],
    platform: ['Uniswap V3'],
    tokenAddress: addresses.V2.UniV3_USDC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDC_ETH.NewVault,
    pricesInfo: {
      USDC: ['Min price: 1980 USDC per ETH', 'Max price: 3580 USDC per ETH'],
      ETH: ['Min price: 0.000279 ETH per USDC', 'Max price: 0.000505 ETH per USDC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDC_ETH.NewVault, 'USDC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'WETH'],
  },
  UniV3_ETH_USDT: {
    inactive: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    subLabel: 'ETH Range: 1.9K⟷3.5K',
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/eth.svg', './icons/usdt.svg'],
    tokenNames: ['ETH', 'USDT'],
    platform: ['Uniswap V3'],
    tokenAddress: addresses.V2.UniV3_ETH_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_ETH_USDT.NewVault,
    pricesInfo: {
      ETH: ['Min price: 1980 USDT per ETH', 'Max price: 3580 USDT per ETH'],
      USDT: ['Min price: 0.000279 ETH per USDT', 'Max price: 0.000505 ETH per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_ETH_USDT.NewVault, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WETH', 'USDT'],
  },
  UniV3_DAI_ETH: {
    inactive: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    subLabel: 'ETH Range: 1.9K⟷3.5K',
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/dai.svg', './icons/eth.svg'],
    tokenNames: ['DAI', 'ETH'],
    platform: ['Uniswap V3'],
    tokenAddress: addresses.V2.UniV3_DAI_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DAI_ETH.NewVault,
    pricesInfo: {
      DAI: ['Min price: 0.000279 ETH per DAI', 'Max price: 0.000505 ETH per DAI'],
      ETH: ['Min price: 1980 DAI per ETH', 'Max price: 3580 DAI per ETH'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DAI_ETH.NewVault, 'DAI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'WETH'],
  },
  UniV3_USDC_USDT: {
    inactive: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/usdc.svg', './icons/usdt.svg'],
    tokenNames: ['USDC', 'USDT'],
    platform: ['Uniswap V3'],
    tokenAddress: addresses.V2.UniV3_USDC_USDT.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_USDC_USDT.NewVault,
    pricesInfo: {
      USDC: ['Min price: 0.999 USDT per USDC', 'Max price: 1.001 USDT per USDC'],
      USDT: ['Min price: 0.999 USDC per USDT', 'Max price: 1.001 USDC per USDT'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_USDC_USDT.NewVault, 'USDC', 'USDT'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'USDC', 'USDT'],
  },
  UniV3_WBTC_ETH: {
    inactive: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    isUniv3: true,
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/wbtc.svg', './icons/eth.svg'],
    tokenNames: ['WBTC', 'ETH'],
    platform: ['Uniswap V3'],
    tokenAddress: addresses.V2.UniV3_WBTC_ETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_WBTC_ETH.NewVault,
    pricesInfo: {
      ETH: ['Min price: 0.051 BTC per ETH', 'Max price: 0.101 BTC per ETH'],
      WBTC: ['Min price: 19.607 ETH per WBTC', 'Max price: 9.901 ETH per WBTC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_WBTC_ETH.NewVault, 'WBTC', 'WETH'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'WBTC', 'WETH'],
  },
  UniV3_DAI_USDC: {
    inactive: true,
    isSingleAssetWithdrawalAllowed: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/univ3.svg'],
    apyTokenSymbols: ['UNI'],
    logoUrl: ['./icons/dai.svg', './icons/usdc.svg'],
    tokenNames: ['DAI', 'USDC'],
    platform: ['Uniswap V3'],
    tokenAddress: addresses.V2.UniV3_DAI_USDC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.UniV3_DAI_USDC.NewVault,
    pricesInfo: {
      DAI: ['Min price: 0.9994 USDC per DAI', 'Max price: 1.0024 USDC per DAI'],
      USDC: ['Min price: 0.9976 DAI per USDC', 'Max price: 1.0006 DAI per USDC'],
    },
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.UniV3_DAI_USDC.NewVault, 'DAI', 'USDC'],
    },
    estimateApyFunctions: [
      {
        extraDailyCompound: false,
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    migrationInfo: {
      lpTokenAddress: '0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5',
      lpTokenName: 'USDC-DAI',
      lpTokenDecimals: '18',
    },
    zapFrontrunProtection: true,
    cmcRewardTokenSymbols: ['iFARM', 'DAI', 'USDC'],
  },
  TBTC: {
    logoUrl: [],
    tokenAddress: addresses.TBTC,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.TBTC] },
  },
  '1INCH': {
    logoUrl: ['./icons/1inch.png'],
    tokenAddress: addresses['1INCH'],
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses['1INCH']] },
  },
  MUSE: {
    logoUrl: ['./icons/muse.svg'],
    tokenAddress: addresses.MUSE,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.MUSE],
    },
  },
  NUDES20: {
    logoUrl: ['./icons/nudes20.png'],
    tokenAddress: addresses.NUDES20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.NUDES20, addresses.WETH],
    },
  },
  MCAT20: {
    logoUrl: ['./icons/mooncat20.svg'],
    tokenAddress: addresses.MCAT20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.MCAT20, addresses.WETH],
    },
  },
  crvOBTC: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/curve-obtc.png'],
    tokenNames: ['OBTC', 'RENBTC', 'WBTC', 'sBTC'],
    platform: ['Curve'],
    tokenAddress: addresses.V2.crvOBTC.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvOBTC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['obtc', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  TBTCMixed: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/tbtc-mixed.png'],
    tokenNames: ['TBTC', 'RENBTC', 'WBTC', 'sBTC'],
    platform: ['Curve'],
    tokenAddress: addresses.TBTC_MIXED,
    decimals: '18',
    vaultAddress: addresses.V2.TBTCMixed.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['tbtc', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CRV', 'CVX'],
  },
  CRVRENWBTC: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    logoUrl: ['./icons/ren.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['RENWBTC', 'WBTC'],
    platform: ['Curve'],
    tokenAddress: addresses.CRVRENWBTC,
    decimals: '18',
    vaultAddress: addresses.V2.crvRenWBTC.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.WBTC] }, // TODO: add price calculation for CRVRENWBTC
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['ren', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  sETH2: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/seth.svg'],
    tokenAddress: addresses.sETH2,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.sETH2],
    },
  },
  INDEX: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/index.png'],
    tokenAddress: addresses.INDEX,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.INDEX],
    },
  },
  'ETH-MVI': {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    logoUrl: ['./icons/eth.svg', './icons/mvi.png'],
    apyIconUrls: [],
    tokenNames: ['ETH', 'MVI'],
    platform: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.V2.uni_ETH_MVI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.uni_ETH_MVI.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'MVI'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.uni_ETH_MVI.Underlying, 'WETH', 'MVI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.V2.uni_ETH_MVI.RewardPool,
          'INDEX',
          'ETH-MVI',
          profitSharingCut30Percent,
        ],
      },
    ],
  },
  MVI: {
    logoUrl: ['./icons/mvi.png'],
    tokenAddress: addresses.MVI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.MVI] },
  },
  'SUSHI-SUSHI-ETH': {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    logoUrl: ['./icons/sushi.svg', './icons/eth.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'SUSHI'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.V2.sushi_SUSHI_WETH.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_SUSHI_WETH.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'SUSHI'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.sushi_SUSHI_WETH.Underlying, 'SUSHI', 'WETH'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.SUSHI, 'SUSHI', 'WETH', '0.7', null],
      },
    ],
  },
  'SUSHI-ETH-DAI': {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    logoUrl: ['./icons/eth.svg', './icons/dai.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'DAI'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_DAI_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_DAI_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_DAI_WETH, 'WETH', 'DAI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.DAI, 'WETH', 'DAI', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DAI'],
  },
  'SUSHI-ETH-USDT': {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    logoUrl: ['./icons/eth.svg', './icons/usdt.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'USDT'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_USDT_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDT_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDT_WETH, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.USDT, 'WETH', 'USDT', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDT'],
  },
  'SUSHI-ETH-WBTC': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/eth.svg', './icons/wbtc.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'WBTC'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_WBTC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_WBTC_WETH.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_WBTC_WETH, 'WETH', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI,
        params: [SUSHI_POOLS_IDS.WBTC, 'WETH', 'WBTC', '0.7', null],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'WBTC'],
  },
  SUSHI_HODL: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    subLabel: 'HODL',
    logoUrl: ['./icons/sushi.svg'],
    tokenNames: ['SUSHI'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.V2.SUSHI.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.SUSHI.NewVault,
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.SUSHI] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.NATIVE_SUSHI,
        params: [],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'SUSHI'],
  },
  'SUSHI-ETH-DAI-HODL': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    subLabel: 'HODL',
    logoUrl: ['./icons/eth.svg', './icons/dai.svg'],
    tokenNames: ['ETH', 'DAI'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_DAI_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_DAI_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'DAI'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_DAI_WETH, 'WETH', 'DAI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.DAI, 'WETH', 'DAI', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  'SUSHI-ETH-USDC-HODL': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    subLabel: 'HODL',
    logoUrl: ['./icons/eth.svg', './icons/usdc.svg'],
    tokenNames: ['ETH', 'USDC'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_USDC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDC_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'USDC'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDC_WETH, 'WETH', 'USDC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDC, 'WETH', 'USDC', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  'SUSHI-ETH-USDT-HODL': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    subLabel: 'HODL',
    logoUrl: ['./icons/eth.svg', './icons/usdt.svg'],
    tokenNames: ['ETH', 'USDT'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_USDT_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_USDT_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'USDT'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDT_WETH, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDT, 'WETH', 'USDT', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  'SUSHI-ETH-WBTC-HODL': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: [],
    apyTokenSymbols: [],
    subLabel: 'HODL',
    logoUrl: ['./icons/eth.svg', './icons/wbtc.svg'],
    tokenNames: ['ETH', 'WBTC'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.sushi_WBTC_WETH,
    decimals: '18',
    vaultAddress: addresses.V2.sushi_WBTC_WETH_HODL.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'WBTC'],
    hideiFarmSymbol: true,
    hideFarmApy: true,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_WBTC_WETH, 'WETH', 'WBTC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.WBTC, 'WETH', 'WBTC', '0.85', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-DAI': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-DAI-HODL',
    subLabel: '(migrated from 1INCH)',
    logoUrl: ['./icons/1inch.png', './icons/eth.svg', './icons/dai.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'DAI'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.V2.oneInch_ETH_DAI.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_DAI.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DAI'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_DAI_WETH, 'WETH', 'DAI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.DAI, 'WETH', 'DAI', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-USDC': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-USDC-HODL',
    subLabel: '(migrated from 1INCH)',
    logoUrl: ['./icons/1inch.png', './icons/eth.svg', './icons/usdc.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'USDC'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.V2.oneInch_ETH_USDC.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_USDC.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDC'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDC_WETH, 'WETH', 'USDC'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDC, 'WETH', 'USDC', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  '1INCH-ETH-USDT': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    hodlVaultId: 'SUSHI-ETH-USDT-HODL',
    subLabel: '(migrated from 1INCH)',
    logoUrl: ['./icons/1inch.png', './icons/eth.svg', './icons/usdt.svg'],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenNames: ['ETH', 'USDT'],
    platform: ['Sushiswap'],
    tokenAddress: addresses.V2.oneInch_ETH_USDT.Underlying,
    decimals: '18',
    newDetails: true,
    vaultAddress: addresses.V2.oneInch_ETH_USDT.NewVault,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'USDT'],
    disabledDepositTooltip: 'To deposit more assets, use vaults in the <b>SUSHI HODL</b> category',
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.sushi_USDT_WETH, 'WETH', 'USDT'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SUSHI_PLUS_NATIVE,
        params: [SUSHI_POOLS_IDS.USDT, 'WETH', 'USDT', '1', null],
        extraDailyCompound: false,
      },
    ],
  },
  'MUSE-ETH': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/muse.svg', './icons/eth.svg'],
    tokenNames: ['MUSE', 'ETH'],
    platform: ['Uniswap'],
    tokenAddress: addresses.V2.nft20_Muse.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Muse.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MUSE'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Muse.Underlying, 'WETH', 'MUSE'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Muse.PoolId, 'MUSE-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  'DUDES20-ETH': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/dudes20.png', './icons/eth.svg'],
    tokenNames: ['DUDES20', 'ETH'],
    platform: [],
    tokenAddress: addresses.V2.nft20_Dudes.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Dudes.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'NUDES20'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Dudes.Underlying, 'WETH', 'NUDES20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Dudes.PoolId, 'DUDES20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  'MOONCAT20-ETH': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/mooncat20.svg', './icons/eth.svg'],
    tokenNames: ['MCAT20', 'ETH'],
    platform: [],
    tokenAddress: addresses.V2.nft20_Mooncat.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Mooncat.NewVault,
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MCAT20'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Mooncat.Underlying, 'WETH', 'MCAT20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Mooncat.PoolId, 'MOONCAT20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
  },
  YCRV: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/ycrv.png'],
    tokenNames: ['USDC', 'USDT', 'DAI', 'TUSD'],
    platform: ['Convex Finance'],
    tokenAddress: addresses.YCRV,
    decimals: '18',
    vaultAddress: addresses.V2.YCRV.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.06'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['ypool', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  ThreePool: {
    chain: CHAIN_IDS.ETH_MAINNET,
    apyIconUrls: ['./icons/curve.svg', './icons/cvx.svg'],
    apyTokenSymbols: ['CRV', 'CVX'],
    logoUrl: ['./icons/dai.svg', './icons/usdc.svg', './icons/usdt.svg'],
    tokenNames: ['DAI', 'USDC', 'USDT'],
    tags: ['Advanced', 'Stable'],
    platform: ['Convex Finance'],
    tokenAddress: addresses.THREE_POOL,
    decimals: '18',
    vaultAddress: addresses.V2.ThreePool.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.CURVE_POOL,
      params: [addresses.V2.ThreePool.Miner, addresses.THREE_POOL, '18', ['USDC', 'USDT', 'DAI']],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['3pool', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  crvCOMPOUND: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/comp.svg'],
    tokenNames: ['DAI', 'USDC'],
    platform: ['Curve'],
    tokenAddress: addresses.crvCOMPOUND,
    decimals: '18',
    vaultAddress: addresses.V2.crvCOMPOUND.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.MANUAL, params: ['1.0381'] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CONVEX,
        params: ['compound', profitSharingCut30Percent],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CVX', 'CRV'],
  },
  UNI: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/univ3.svg'],
    tokenNames: ['UNISWAP'],
    platform: ['Uniswap'],
    tokenAddress: addresses.UNI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_CONTRACT,
      params: [addresses.UNI],
    },
  },
  SUSHI: {
    logoUrl: ['./icons/sushi.svg'],
    tokenAddress: addresses.SUSHI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.SUSHI] },
  },
  DPI: {
    logoUrl: ['./icons/dpi.svg'],
    tokenAddress: addresses.DPI,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.DPI] },
  },
  CRV: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/curve.svg'],
    tokenAddress: addresses.CRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.CRV] },
  },
  cvxCRV: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.cvxCRV,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.cvxCRV] },
  },
  crvGUSD: {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/curve-gusd.png'],
    tokenNames: ['GUSD', 'DAI', 'USDC', 'USDT'],
    platform: ['Curve'],
    tokenAddress: addresses.V2.crvGUSD.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.crvGUSD.NewVault,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.GUSD] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.CRV_GENERAL,
        params: [
          'crvGUSD', // itself
          addresses.V2.crvGUSD.GaugePool, // gauge pool
          '0x4f062658EaAF2C1ccf8C8e36D6824CDf41167956', // swap address
          profitSharingCut30Percent,
        ],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'CRV'],
  },
  IFARM: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/ifarm.svg'],
    apyIconUrls: ['./icons/farm.svg'],
    apyTokenSymbols: ['FARM'],
    tokenNames: ['iFARM'],
    platform: ['Harvest'],
    tags: ['Beginners'],
    tokenAddress: addresses.FARM,
    decimals: '18',
    vaultAddress: addresses.iFARM,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['harvest-finance'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.PROFIT_SHARE,
        params: [],
      },
    ],
  },
  'MEME20-ETH': {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    isDegen: true,
    isNFT: true,
    apyIconUrls: [],
    apyTokenSymbols: [],
    logoUrl: ['./icons/meme20.png', './icons/eth.svg'],
    tokenNames: ['MEME20', 'ETH'],
    platform: [],
    tokenAddress: addresses.V2.nft20_Meme.Underlying,
    decimals: '18',
    vaultAddress: addresses.V2.nft20_Meme.NewVault,
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.V2.nft20_Meme.Underlying, 'WETH', 'MEME20'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MUSE,
        params: [addresses.V2.nft20_Meme.PoolId, 'MEME20-ETH', '0'],
        extraDailyCompound: false,
      },
    ],
    cmcRewardTokenSymbols: ['iFARM', 'ETH', 'MEME20'],
  },
  MEME20: {
    logoUrl: ['./icons/meme20.png'],
    tokenAddress: addresses.MEME20,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.UNISWAP_PAIR,
      params: [addresses.MEME20, addresses.WETH],
    },
  },
  'ETH-DPI': {
    chain: CHAIN_IDS.ETH_MAINNET,
    inactive: true,
    logoUrl: ['./icons/eth.svg', './icons/dpi.svg'],
    apyIconUrls: [],
    tokenNames: ['ETH', 'DPI'],
    platform: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.UNI_LP_WETH_DPI,
    decimals: '18',
    vaultAddress: addresses.VaultUNI_LP_WETH_DPI,
    cmcRewardTokenSymbols: ['FARM', 'ETH', 'DPI'],
    priceFunction: {
      type: GET_PRICE_TYPES.LP_TOKEN,
      params: [addresses.UNI_LP_WETH_DPI, 'WETH', 'DPI'],
    },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.SNX,
        params: [
          addresses.UNISWAP_SNX_POOL_ADDRESS_ETH_DPI,
          'INDEX',
          'ETH-DPI',
          profitSharingCut30Percent,
        ],
      },
    ],
  },
  RENBTC: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/ren.svg'],
    tokenNames: ['RENBTC'],
    platform: [],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.RENBTC,
    decimals: '8',
    vaultAddress: addresses.V2.renBTC.NewVault,
    hideFarmSymbol: true,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.RENBTC] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'RENBTC'],
  },
  TUSD: {
    inactive: true,
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: ['./icons/tusd.png'],
    tokenNames: ['TUSD'],
    platform: [],
    apyIconUrls: [],
    apyTokenSymbols: [],
    tokenAddress: addresses.TUSD,
    decimals: '18',
    vaultAddress: addresses.ProxiedVaultTUSD,
    priceFunction: { type: GET_PRICE_TYPES.COINGECKO_CONTRACT, params: [addresses.TUSD] },
    estimateApyFunctions: [
      {
        type: ESTIMATED_APY_TYPES.MANUAL,
        params: ['0.00'],
      },
    ],
    cmcRewardTokenSymbols: ['FARM', 'TUSD'],
  },
  fSUSHI: {
    chain: CHAIN_IDS.ETH_MAINNET,
    logoUrl: [], // unused
    tokenAddress: addresses.V2.SUSHI.NewVault,
    decimals: '18',
    vaultAddress: null,
    priceFunction: { type: GET_PRICE_TYPES.F_TOKEN, params: [addresses.V2.SUSHI.NewVault, '18'] },
  },
  JEUR: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: ['./icons/jeur.svg'],
    tokenAddress: addresses.MATIC.JEUR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['jarvis-synthetic-euro'],
    },
  },
  pMIMO: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.pMIMO,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['mimo-parallel-governance-token'],
    },
  },
  PAR: {
    chain: CHAIN_IDS.POLYGON_MAINNET,
    logoUrl: [],
    tokenAddress: addresses.MATIC.PAR,
    decimals: '18',
    vaultAddress: null,
    priceFunction: {
      type: GET_PRICE_TYPES.COINGECKO_ID,
      params: ['par-stablecoin'],
    },
  },
}
